// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package payments

import (
	"math/big"
	"strings"

	"github.com/klaytn/klaytn"
	"github.com/klaytn/klaytn/accounts/abi"
	"github.com/klaytn/klaytn/accounts/abi/bind"
	"github.com/klaytn/klaytn/blockchain/types"
	"github.com/klaytn/klaytn/common"
	"github.com/klaytn/klaytn/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = klaytn.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// PaymentABI is the input ABI used to generate the binding from.
const PaymentABI = "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_settleInterval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"CancelPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"SendPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"SettlePayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"txHash\",\"type\":\"bytes32\"}],\"name\":\"cancelPayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPayments\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSettleInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSettleablePayments\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"txHash\",\"type\":\"bytes32\"}],\"name\":\"isAbleToSettle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"sendPayment\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settlePayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// PaymentBinRuntime is the compiled bytecode used for adding genesis block without deploying code.
const PaymentBinRuntime = `6080604052600436106100705760003560e01c8063c46e96781161004e578063c46e9678146100c2578063d56bd142146100e2578063d7a7070d14610104578063fa3b2d9f1461011957600080fd5b80637bf905aa146100755780637fb0dacc1461008c5780638a7644a8146100af575b600080fd5b34801561008157600080fd5b5061008a610149565b005b34801561009857600080fd5b506002546040519081526020015b60405180910390f35b61008a6100bd366004610e44565b61044e565b3480156100ce57600080fd5b5061008a6100dd366004610f39565b6106f4565b3480156100ee57600080fd5b506100f76108f1565b6040516100a69190610fcf565b34801561011057600080fd5b506100f7610ae8565b34801561012557600080fd5b50610139610134366004610f39565b610cf9565b60405190151581526020016100a6565b336000908152602081905260409020546001600160a01b031661016857565b336000908152602081905260409020546001600160a01b03165b806001600160a01b03166359e02dd76040518163ffffffff1660e01b815260040160206040518083038186803b1580156101bb57600080fd5b505afa1580156101cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101f39190610f52565b158015906102755750610275816001600160a01b03166359e02dd76040518163ffffffff1660e01b815260040160206040518083038186803b15801561023857600080fd5b505afa15801561024c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102709190610f52565b610dd0565b1561044b576000816001600160a01b031663957908d16040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156102b757600080fd5b505af11580156102cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ef9190610f52565b60008181526001602052604090206002015490915061030e5750610182565b60008181526001602081905260408083209182015460029092015490516001600160a01b03909216929091839183156108fc02918491818181858888f19350505050158015610361573d6000803e3d6000fd5b50604080513081526001600160a01b03841660208201529081018290527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060600160405180910390a160008381526001602081905260409182902080549181015460029091015492517f1dad408564bbadde3286d1e89c8439bb753840ba6123a326442ca7eb0c2dada193610406936001600160a01b039081169316918890610fa6565b60405180910390a150506000908152600160208190526040822080546001600160a01b0319908116825591810180549092169091556002810182905560030155610182565b50565b346104995760405162461bcd60e51b81526020600482015260166024820152750616d6f756e742073686f756c64206e6f7420626520360541b60448201526064015b60405180910390fd5b6001600160a01b0381811660009081526020819052604090205416610511576040516104c490610e37565b604051809103906000f0801580156104e0573d6000803e3d6000fd5b506001600160a01b03828116600090815260208190526040902080546001600160a01b031916929091169190911790555b60408051608081018252338082526001600160a01b03841660208084019190915234838501819052436060808601829052600354965194811b6bffffffffffffffffffffffff199081169486019490945287901b90921660348401526048830152606882015260888101929092529060009060029060a80160408051601f19818403018152908290526105a391610f6b565b602060405180830381855afa1580156105c0573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906105e39190610f52565b6003805460010190556001600160a01b038481166000908152602081905260409081902054905163b4de3e2360e01b815260048101849052929350169063b4de3e2390602401600060405180830381600087803b15801561064357600080fd5b505af1158015610657573d6000803e3d6000fd5b505050600082815260016020818152604092839020865181546001600160a01b03199081166001600160a01b0392831617835592880151938201805490931693169290921790558482015160028201556060850151600390910155517fa73936678f59aee66a2252d7c8b337ad416bc536c6a98ff626d041e75e79563791506106e7903390869034908690610fa6565b60405180910390a1505050565b60008181526001602052604090206002015481906107545760405162461bcd60e51b815260206004820152601b60248201527f537563682074784861736820646f6573206e6f742065786973742e00000000006044820152606401610490565b6000828152600160208190526040909120015482906001600160a01b031633146107ba5760405162461bcd60e51b815260206004820152601760248201527627b7363c903932b1b2b4bb32b91031b0b71031b0b6361760491b6044820152606401610490565b600083815260016020526040808220805460029091015491516001600160a01b0390911692839183156108fc0291849190818181858888f19350505050158015610808573d6000803e3d6000fd5b50604080513081526001600160a01b03841660208201529081018290527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060600160405180910390a160008581526001602081905260409182902080549181015460029091015492517fa73936678f59aee66a2252d7c8b337ad416bc536c6a98ff626d041e75e795637936108ad936001600160a01b039081169316918a90610fa6565b60405180910390a1505050600091825250600160208190526040822080546001600160a01b0319908116825591810180549092169091556002810182905560030155565b336000908152602081905260409020546060906001600160a01b03166109175750606090565b336000908152602081905260408082205481516353ed514360e01b815291516001600160a01b03909116916353ed51439160048083019286929190829003018186803b15801561096657600080fd5b505afa15801561097a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109a29190810190610e74565b90506000805b8251811015610a0e5760008382815181106109c5576109c561105c565b6020026020010151905060016000828152602001908152602001600020600201546000146109fb57826109f78161102b565b9350505b5080610a068161102b565b9150506109a8565b5060008167ffffffffffffffff811115610a2a57610a2a611072565b604051908082528060200260200182016040528015610a53578160200160208202803683370190505b5090506000805b8451811015610ade576000858281518110610a7757610a7761105c565b602002602001015190506001600082815260200190815260200160002060020154600014610acb5780848481518110610ab257610ab261105c565b602090810291909101015282610ac78161102b565b9350505b5080610ad68161102b565b915050610a5a565b5090949350505050565b336000908152602081905260409020546060906001600160a01b0316610b0e5750606090565b336000908152602081905260408082205481516353ed514360e01b815291516001600160a01b03909116916353ed51439160048083019286929190829003018186803b158015610b5d57600080fd5b505afa158015610b71573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b999190810190610e74565b90506000805b8251811015610c17576000838281518110610bbc57610bbc61105c565b602002602001015190506001600082815260200190815260200160002060020154600014158015610bf15750610bf181610dd0565b15610c045782610c008161102b565b9350505b5080610c0f8161102b565b915050610b9f565b5060008167ffffffffffffffff811115610c3357610c33611072565b604051908082528060200260200182016040528015610c5c578160200160208202803683370190505b5090506000805b8451811015610ade576000858281518110610c8057610c8061105c565b602002602001015190506001600082815260200190815260200160002060020154600014158015610cb55750610cb581610dd0565b15610ce65780848481518110610ccd57610ccd61105c565b602090810291909101015282610ce28161102b565b9350505b5080610cf18161102b565b915050610c63565b6000818152600160205260408120600201548290610d595760405162461bcd60e51b815260206004820152601b60248201527f537563682074784861736820646f6573206e6f742065786973742e00000000006044820152606401610490565b6000838152600160208190526040909120015483906001600160a01b03163314610dbf5760405162461bcd60e51b815260206004820152601760248201527627b7363c903932b1b2b4bb32b91031b0b71031b0b6361760491b6044820152606401610490565b610dc884610dd0565b949350505050565b6000818152600160208181526040808420815160808101835281546001600160a01b0390811682529482015490941692840192909252600280830154918401919091526003909101546060830181905290544391610e2e9190611013565b11159392505050565b61049b8061108983390190565b600060208284031215610e5657600080fd5b81356001600160a01b0381168114610e6d57600080fd5b9392505050565b60006020808385031215610e8757600080fd5b825167ffffffffffffffff80821115610e9f57600080fd5b818501915085601f830112610eb357600080fd5b815181811115610ec557610ec5611072565b8060051b604051601f19603f83011681018181108582111715610eea57610eea611072565b604052828152858101935084860182860187018a1015610f0957600080fd5b600095505b83861015610f2c578051855260019590950194938601938601610f0e565b5098975050505050505050565b600060208284031215610f4b57600080fd5b5035919050565b600060208284031215610f6457600080fd5b5051919050565b6000825160005b81811015610f8c5760208186018101518583015201610f72565b81811115610f9b576000828501525b509190910192915050565b6001600160a01b0394851681529290931660208301526040820152606081019190915260800190565b6020808252825182820181905260009190848201906040850190845b8181101561100757835183529284019291840191600101610feb565b50909695505050505050565b6000821982111561102657611026611046565b500190565b600060001982141561103f5761103f611046565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfe608060405260018055600060025534801561001957600080fd5b50600380546001600160a01b031916331790556104608061003b6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806353ed51431461005157806359e02dd71461006f578063957908d114610085578063b4de3e231461008d575b600080fd5b6100596100a2565b6040516100669190610323565b60405180910390f35b6100776101a9565b604051908152602001610066565b6100776101fe565b6100a061009b36600461030a565b6102b4565b005b6003546060906001600160a01b031633146100d85760405162461bcd60e51b81526004016100cf90610367565b60405180910390fd5b600060015460025460016100ec919061039e565b6100f691906103b6565b67ffffffffffffffff81111561010e5761010e610414565b604051908082528060200260200182016040528015610137578160200160208202803683370190505b509050600154600254101561014b57905090565b6001545b60025481116101a357600081815260208190526040902054600154839061017690846103b6565b81518110610186576101866103fe565b60209081029190910101528061019b816103cd565b91505061014f565b50905090565b6003546000906001600160a01b031633146101d65760405162461bcd60e51b81526004016100cf90610367565b60015460025410156101e85750600090565b5060015460009081526020819052604090205490565b6003546000906001600160a01b0316331461022b5760405162461bcd60e51b81526004016100cf90610367565b600154600254101561027f5760405162461bcd60e51b815260206004820181905260248201527f556e61626c6520746f206465717565756520616e20656d70747920717565756560448201526064016100cf565b600180546000908152602081905260408120805490829055825490929182916102a990839061039e565b909155509091505090565b6003546001600160a01b031633146102de5760405162461bcd60e51b81526004016100cf90610367565b6001600260008282546102f1919061039e565b9091555050600254600090815260208190526040902055565b60006020828403121561031c57600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b8181101561035b5783518352928401929184019160010161033f565b50909695505050505050565b6020808252601d908201527f4f6e6c7920636f6e7472616374206f776e65722063616e2063616c6c2e000000604082015260600190565b600082198211156103b1576103b16103e8565b500190565b6000828210156103c8576103c86103e8565b500390565b60006000198214156103e1576103e16103e8565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea264697066735822122097827ba70323df3df59d2f32055a685b12c8ee0696dafb407d664e9b2f9d62fc64736f6c63430008070033a26469706673582212204df8f4b7f98c4cf98d1b2f71c6ebe94c4bc7f692da124d3d8383d37d9c25d24364736f6c63430008070033`

// PaymentFuncSigs maps the 4-byte function signature to its string representation.
var PaymentFuncSigs = map[string]string{
	"c46e9678": "cancelPayment(bytes32)",
	"d56bd142": "getPayments()",
	"7fb0dacc": "getSettleInterval()",
	"d7a7070d": "getSettleablePayments()",
	"fa3b2d9f": "isAbleToSettle(bytes32)",
	"8a7644a8": "sendPayment(address)",
	"7bf905aa": "settlePayment()",
}

// PaymentBin is the compiled bytecode used for deploying new contracts.
var PaymentBin = "0x608060405234801561001057600080fd5b506040516115c83803806115c883398101604081905261002f91610047565b6002819055806100415762278d006002555b50610060565b60006020828403121561005957600080fd5b5051919050565b6115598061006f6000396000f3fe6080604052600436106100705760003560e01c8063c46e96781161004e578063c46e9678146100c2578063d56bd142146100e2578063d7a7070d14610104578063fa3b2d9f1461011957600080fd5b80637bf905aa146100755780637fb0dacc1461008c5780638a7644a8146100af575b600080fd5b34801561008157600080fd5b5061008a610149565b005b34801561009857600080fd5b506002546040519081526020015b60405180910390f35b61008a6100bd366004610e44565b61044e565b3480156100ce57600080fd5b5061008a6100dd366004610f39565b6106f4565b3480156100ee57600080fd5b506100f76108f1565b6040516100a69190610fcf565b34801561011057600080fd5b506100f7610ae8565b34801561012557600080fd5b50610139610134366004610f39565b610cf9565b60405190151581526020016100a6565b336000908152602081905260409020546001600160a01b031661016857565b336000908152602081905260409020546001600160a01b03165b806001600160a01b03166359e02dd76040518163ffffffff1660e01b815260040160206040518083038186803b1580156101bb57600080fd5b505afa1580156101cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101f39190610f52565b158015906102755750610275816001600160a01b03166359e02dd76040518163ffffffff1660e01b815260040160206040518083038186803b15801561023857600080fd5b505afa15801561024c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102709190610f52565b610dd0565b1561044b576000816001600160a01b031663957908d16040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156102b757600080fd5b505af11580156102cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ef9190610f52565b60008181526001602052604090206002015490915061030e5750610182565b60008181526001602081905260408083209182015460029092015490516001600160a01b03909216929091839183156108fc02918491818181858888f19350505050158015610361573d6000803e3d6000fd5b50604080513081526001600160a01b03841660208201529081018290527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060600160405180910390a160008381526001602081905260409182902080549181015460029091015492517f1dad408564bbadde3286d1e89c8439bb753840ba6123a326442ca7eb0c2dada193610406936001600160a01b039081169316918890610fa6565b60405180910390a150506000908152600160208190526040822080546001600160a01b0319908116825591810180549092169091556002810182905560030155610182565b50565b346104995760405162461bcd60e51b81526020600482015260166024820152750616d6f756e742073686f756c64206e6f7420626520360541b60448201526064015b60405180910390fd5b6001600160a01b0381811660009081526020819052604090205416610511576040516104c490610e37565b604051809103906000f0801580156104e0573d6000803e3d6000fd5b506001600160a01b03828116600090815260208190526040902080546001600160a01b031916929091169190911790555b60408051608081018252338082526001600160a01b03841660208084019190915234838501819052436060808601829052600354965194811b6bffffffffffffffffffffffff199081169486019490945287901b90921660348401526048830152606882015260888101929092529060009060029060a80160408051601f19818403018152908290526105a391610f6b565b602060405180830381855afa1580156105c0573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906105e39190610f52565b6003805460010190556001600160a01b038481166000908152602081905260409081902054905163b4de3e2360e01b815260048101849052929350169063b4de3e2390602401600060405180830381600087803b15801561064357600080fd5b505af1158015610657573d6000803e3d6000fd5b505050600082815260016020818152604092839020865181546001600160a01b03199081166001600160a01b0392831617835592880151938201805490931693169290921790558482015160028201556060850151600390910155517fa73936678f59aee66a2252d7c8b337ad416bc536c6a98ff626d041e75e79563791506106e7903390869034908690610fa6565b60405180910390a1505050565b60008181526001602052604090206002015481906107545760405162461bcd60e51b815260206004820152601b60248201527f537563682074784861736820646f6573206e6f742065786973742e00000000006044820152606401610490565b6000828152600160208190526040909120015482906001600160a01b031633146107ba5760405162461bcd60e51b815260206004820152601760248201527627b7363c903932b1b2b4bb32b91031b0b71031b0b6361760491b6044820152606401610490565b600083815260016020526040808220805460029091015491516001600160a01b0390911692839183156108fc0291849190818181858888f19350505050158015610808573d6000803e3d6000fd5b50604080513081526001600160a01b03841660208201529081018290527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060600160405180910390a160008581526001602081905260409182902080549181015460029091015492517fa73936678f59aee66a2252d7c8b337ad416bc536c6a98ff626d041e75e795637936108ad936001600160a01b039081169316918a90610fa6565b60405180910390a1505050600091825250600160208190526040822080546001600160a01b0319908116825591810180549092169091556002810182905560030155565b336000908152602081905260409020546060906001600160a01b03166109175750606090565b336000908152602081905260408082205481516353ed514360e01b815291516001600160a01b03909116916353ed51439160048083019286929190829003018186803b15801561096657600080fd5b505afa15801561097a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109a29190810190610e74565b90506000805b8251811015610a0e5760008382815181106109c5576109c561105c565b6020026020010151905060016000828152602001908152602001600020600201546000146109fb57826109f78161102b565b9350505b5080610a068161102b565b9150506109a8565b5060008167ffffffffffffffff811115610a2a57610a2a611072565b604051908082528060200260200182016040528015610a53578160200160208202803683370190505b5090506000805b8451811015610ade576000858281518110610a7757610a7761105c565b602002602001015190506001600082815260200190815260200160002060020154600014610acb5780848481518110610ab257610ab261105c565b602090810291909101015282610ac78161102b565b9350505b5080610ad68161102b565b915050610a5a565b5090949350505050565b336000908152602081905260409020546060906001600160a01b0316610b0e5750606090565b336000908152602081905260408082205481516353ed514360e01b815291516001600160a01b03909116916353ed51439160048083019286929190829003018186803b158015610b5d57600080fd5b505afa158015610b71573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b999190810190610e74565b90506000805b8251811015610c17576000838281518110610bbc57610bbc61105c565b602002602001015190506001600082815260200190815260200160002060020154600014158015610bf15750610bf181610dd0565b15610c045782610c008161102b565b9350505b5080610c0f8161102b565b915050610b9f565b5060008167ffffffffffffffff811115610c3357610c33611072565b604051908082528060200260200182016040528015610c5c578160200160208202803683370190505b5090506000805b8451811015610ade576000858281518110610c8057610c8061105c565b602002602001015190506001600082815260200190815260200160002060020154600014158015610cb55750610cb581610dd0565b15610ce65780848481518110610ccd57610ccd61105c565b602090810291909101015282610ce28161102b565b9350505b5080610cf18161102b565b915050610c63565b6000818152600160205260408120600201548290610d595760405162461bcd60e51b815260206004820152601b60248201527f537563682074784861736820646f6573206e6f742065786973742e00000000006044820152606401610490565b6000838152600160208190526040909120015483906001600160a01b03163314610dbf5760405162461bcd60e51b815260206004820152601760248201527627b7363c903932b1b2b4bb32b91031b0b71031b0b6361760491b6044820152606401610490565b610dc884610dd0565b949350505050565b6000818152600160208181526040808420815160808101835281546001600160a01b0390811682529482015490941692840192909252600280830154918401919091526003909101546060830181905290544391610e2e9190611013565b11159392505050565b61049b8061108983390190565b600060208284031215610e5657600080fd5b81356001600160a01b0381168114610e6d57600080fd5b9392505050565b60006020808385031215610e8757600080fd5b825167ffffffffffffffff80821115610e9f57600080fd5b818501915085601f830112610eb357600080fd5b815181811115610ec557610ec5611072565b8060051b604051601f19603f83011681018181108582111715610eea57610eea611072565b604052828152858101935084860182860187018a1015610f0957600080fd5b600095505b83861015610f2c578051855260019590950194938601938601610f0e565b5098975050505050505050565b600060208284031215610f4b57600080fd5b5035919050565b600060208284031215610f6457600080fd5b5051919050565b6000825160005b81811015610f8c5760208186018101518583015201610f72565b81811115610f9b576000828501525b509190910192915050565b6001600160a01b0394851681529290931660208301526040820152606081019190915260800190565b6020808252825182820181905260009190848201906040850190845b8181101561100757835183529284019291840191600101610feb565b50909695505050505050565b6000821982111561102657611026611046565b500190565b600060001982141561103f5761103f611046565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfe608060405260018055600060025534801561001957600080fd5b50600380546001600160a01b031916331790556104608061003b6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806353ed51431461005157806359e02dd71461006f578063957908d114610085578063b4de3e231461008d575b600080fd5b6100596100a2565b6040516100669190610323565b60405180910390f35b6100776101a9565b604051908152602001610066565b6100776101fe565b6100a061009b36600461030a565b6102b4565b005b6003546060906001600160a01b031633146100d85760405162461bcd60e51b81526004016100cf90610367565b60405180910390fd5b600060015460025460016100ec919061039e565b6100f691906103b6565b67ffffffffffffffff81111561010e5761010e610414565b604051908082528060200260200182016040528015610137578160200160208202803683370190505b509050600154600254101561014b57905090565b6001545b60025481116101a357600081815260208190526040902054600154839061017690846103b6565b81518110610186576101866103fe565b60209081029190910101528061019b816103cd565b91505061014f565b50905090565b6003546000906001600160a01b031633146101d65760405162461bcd60e51b81526004016100cf90610367565b60015460025410156101e85750600090565b5060015460009081526020819052604090205490565b6003546000906001600160a01b0316331461022b5760405162461bcd60e51b81526004016100cf90610367565b600154600254101561027f5760405162461bcd60e51b815260206004820181905260248201527f556e61626c6520746f206465717565756520616e20656d70747920717565756560448201526064016100cf565b600180546000908152602081905260408120805490829055825490929182916102a990839061039e565b909155509091505090565b6003546001600160a01b031633146102de5760405162461bcd60e51b81526004016100cf90610367565b6001600260008282546102f1919061039e565b9091555050600254600090815260208190526040902055565b60006020828403121561031c57600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b8181101561035b5783518352928401929184019160010161033f565b50909695505050505050565b6020808252601d908201527f4f6e6c7920636f6e7472616374206f776e65722063616e2063616c6c2e000000604082015260600190565b600082198211156103b1576103b16103e8565b500190565b6000828210156103c8576103c86103e8565b500390565b60006000198214156103e1576103e16103e8565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea264697066735822122097827ba70323df3df59d2f32055a685b12c8ee0696dafb407d664e9b2f9d62fc64736f6c63430008070033a26469706673582212204df8f4b7f98c4cf98d1b2f71c6ebe94c4bc7f692da124d3d8383d37d9c25d24364736f6c63430008070033"

// DeployPayment deploys a new Klaytn contract, binding an instance of Payment to it.
func DeployPayment(auth *bind.TransactOpts, backend bind.ContractBackend, _settleInterval *big.Int) (common.Address, *types.Transaction, *Payment, error) {
	parsed, err := abi.JSON(strings.NewReader(PaymentABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(PaymentBin), backend, _settleInterval)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Payment{PaymentCaller: PaymentCaller{contract: contract}, PaymentTransactor: PaymentTransactor{contract: contract}, PaymentFilterer: PaymentFilterer{contract: contract}}, nil
}

// Payment is an auto generated Go binding around a Klaytn contract.
type Payment struct {
	PaymentCaller     // Read-only binding to the contract
	PaymentTransactor // Write-only binding to the contract
	PaymentFilterer   // Log filterer for contract events
}

// PaymentCaller is an auto generated read-only Go binding around a Klaytn contract.
type PaymentCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PaymentTransactor is an auto generated write-only Go binding around a Klaytn contract.
type PaymentTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PaymentFilterer is an auto generated log filtering Go binding around a Klaytn contract events.
type PaymentFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PaymentSession is an auto generated Go binding around a Klaytn contract,
// with pre-set call and transact options.
type PaymentSession struct {
	Contract     *Payment          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// PaymentCallerSession is an auto generated read-only Go binding around a Klaytn contract,
// with pre-set call options.
type PaymentCallerSession struct {
	Contract *PaymentCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// PaymentTransactorSession is an auto generated write-only Go binding around a Klaytn contract,
// with pre-set transact options.
type PaymentTransactorSession struct {
	Contract     *PaymentTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// PaymentRaw is an auto generated low-level Go binding around a Klaytn contract.
type PaymentRaw struct {
	Contract *Payment // Generic contract binding to access the raw methods on
}

// PaymentCallerRaw is an auto generated low-level read-only Go binding around a Klaytn contract.
type PaymentCallerRaw struct {
	Contract *PaymentCaller // Generic read-only contract binding to access the raw methods on
}

// PaymentTransactorRaw is an auto generated low-level write-only Go binding around a Klaytn contract.
type PaymentTransactorRaw struct {
	Contract *PaymentTransactor // Generic write-only contract binding to access the raw methods on
}

// NewPayment creates a new instance of Payment, bound to a specific deployed contract.
func NewPayment(address common.Address, backend bind.ContractBackend) (*Payment, error) {
	contract, err := bindPayment(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Payment{PaymentCaller: PaymentCaller{contract: contract}, PaymentTransactor: PaymentTransactor{contract: contract}, PaymentFilterer: PaymentFilterer{contract: contract}}, nil
}

// NewPaymentCaller creates a new read-only instance of Payment, bound to a specific deployed contract.
func NewPaymentCaller(address common.Address, caller bind.ContractCaller) (*PaymentCaller, error) {
	contract, err := bindPayment(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &PaymentCaller{contract: contract}, nil
}

// NewPaymentTransactor creates a new write-only instance of Payment, bound to a specific deployed contract.
func NewPaymentTransactor(address common.Address, transactor bind.ContractTransactor) (*PaymentTransactor, error) {
	contract, err := bindPayment(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &PaymentTransactor{contract: contract}, nil
}

// NewPaymentFilterer creates a new log filterer instance of Payment, bound to a specific deployed contract.
func NewPaymentFilterer(address common.Address, filterer bind.ContractFilterer) (*PaymentFilterer, error) {
	contract, err := bindPayment(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &PaymentFilterer{contract: contract}, nil
}

// bindPayment binds a generic wrapper to an already deployed contract.
func bindPayment(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(PaymentABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Payment *PaymentRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Payment.Contract.PaymentCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Payment *PaymentRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Payment.Contract.PaymentTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Payment *PaymentRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Payment.Contract.PaymentTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Payment *PaymentCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Payment.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Payment *PaymentTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Payment.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Payment *PaymentTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Payment.Contract.contract.Transact(opts, method, params...)
}

// GetPayments is a free data retrieval call binding the contract method 0xd56bd142.
//
// Solidity: function getPayments() view returns(bytes32[])
func (_Payment *PaymentCaller) GetPayments(opts *bind.CallOpts) ([][32]byte, error) {
	var (
		ret0 = new([][32]byte)
	)
	out := ret0
	err := _Payment.contract.Call(opts, out, "getPayments")
	return *ret0, err
}

// GetPayments is a free data retrieval call binding the contract method 0xd56bd142.
//
// Solidity: function getPayments() view returns(bytes32[])
func (_Payment *PaymentSession) GetPayments() ([][32]byte, error) {
	return _Payment.Contract.GetPayments(&_Payment.CallOpts)
}

// GetPayments is a free data retrieval call binding the contract method 0xd56bd142.
//
// Solidity: function getPayments() view returns(bytes32[])
func (_Payment *PaymentCallerSession) GetPayments() ([][32]byte, error) {
	return _Payment.Contract.GetPayments(&_Payment.CallOpts)
}

// GetSettleInterval is a free data retrieval call binding the contract method 0x7fb0dacc.
//
// Solidity: function getSettleInterval() view returns(uint256)
func (_Payment *PaymentCaller) GetSettleInterval(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Payment.contract.Call(opts, out, "getSettleInterval")
	return *ret0, err
}

// GetSettleInterval is a free data retrieval call binding the contract method 0x7fb0dacc.
//
// Solidity: function getSettleInterval() view returns(uint256)
func (_Payment *PaymentSession) GetSettleInterval() (*big.Int, error) {
	return _Payment.Contract.GetSettleInterval(&_Payment.CallOpts)
}

// GetSettleInterval is a free data retrieval call binding the contract method 0x7fb0dacc.
//
// Solidity: function getSettleInterval() view returns(uint256)
func (_Payment *PaymentCallerSession) GetSettleInterval() (*big.Int, error) {
	return _Payment.Contract.GetSettleInterval(&_Payment.CallOpts)
}

// GetSettleablePayments is a free data retrieval call binding the contract method 0xd7a7070d.
//
// Solidity: function getSettleablePayments() view returns(bytes32[])
func (_Payment *PaymentCaller) GetSettleablePayments(opts *bind.CallOpts) ([][32]byte, error) {
	var (
		ret0 = new([][32]byte)
	)
	out := ret0
	err := _Payment.contract.Call(opts, out, "getSettleablePayments")
	return *ret0, err
}

// GetSettleablePayments is a free data retrieval call binding the contract method 0xd7a7070d.
//
// Solidity: function getSettleablePayments() view returns(bytes32[])
func (_Payment *PaymentSession) GetSettleablePayments() ([][32]byte, error) {
	return _Payment.Contract.GetSettleablePayments(&_Payment.CallOpts)
}

// GetSettleablePayments is a free data retrieval call binding the contract method 0xd7a7070d.
//
// Solidity: function getSettleablePayments() view returns(bytes32[])
func (_Payment *PaymentCallerSession) GetSettleablePayments() ([][32]byte, error) {
	return _Payment.Contract.GetSettleablePayments(&_Payment.CallOpts)
}

// IsAbleToSettle is a free data retrieval call binding the contract method 0xfa3b2d9f.
//
// Solidity: function isAbleToSettle(bytes32 txHash) view returns(bool)
func (_Payment *PaymentCaller) IsAbleToSettle(opts *bind.CallOpts, txHash [32]byte) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Payment.contract.Call(opts, out, "isAbleToSettle", txHash)
	return *ret0, err
}

// IsAbleToSettle is a free data retrieval call binding the contract method 0xfa3b2d9f.
//
// Solidity: function isAbleToSettle(bytes32 txHash) view returns(bool)
func (_Payment *PaymentSession) IsAbleToSettle(txHash [32]byte) (bool, error) {
	return _Payment.Contract.IsAbleToSettle(&_Payment.CallOpts, txHash)
}

// IsAbleToSettle is a free data retrieval call binding the contract method 0xfa3b2d9f.
//
// Solidity: function isAbleToSettle(bytes32 txHash) view returns(bool)
func (_Payment *PaymentCallerSession) IsAbleToSettle(txHash [32]byte) (bool, error) {
	return _Payment.Contract.IsAbleToSettle(&_Payment.CallOpts, txHash)
}

// CancelPayment is a paid mutator transaction binding the contract method 0xc46e9678.
//
// Solidity: function cancelPayment(bytes32 txHash) returns()
func (_Payment *PaymentTransactor) CancelPayment(opts *bind.TransactOpts, txHash [32]byte) (*types.Transaction, error) {
	return _Payment.contract.Transact(opts, "cancelPayment", txHash)
}

// CancelPayment is a paid mutator transaction binding the contract method 0xc46e9678.
//
// Solidity: function cancelPayment(bytes32 txHash) returns()
func (_Payment *PaymentSession) CancelPayment(txHash [32]byte) (*types.Transaction, error) {
	return _Payment.Contract.CancelPayment(&_Payment.TransactOpts, txHash)
}

// CancelPayment is a paid mutator transaction binding the contract method 0xc46e9678.
//
// Solidity: function cancelPayment(bytes32 txHash) returns()
func (_Payment *PaymentTransactorSession) CancelPayment(txHash [32]byte) (*types.Transaction, error) {
	return _Payment.Contract.CancelPayment(&_Payment.TransactOpts, txHash)
}

// SendPayment is a paid mutator transaction binding the contract method 0x8a7644a8.
//
// Solidity: function sendPayment(address receiver) payable returns()
func (_Payment *PaymentTransactor) SendPayment(opts *bind.TransactOpts, receiver common.Address) (*types.Transaction, error) {
	return _Payment.contract.Transact(opts, "sendPayment", receiver)
}

// SendPayment is a paid mutator transaction binding the contract method 0x8a7644a8.
//
// Solidity: function sendPayment(address receiver) payable returns()
func (_Payment *PaymentSession) SendPayment(receiver common.Address) (*types.Transaction, error) {
	return _Payment.Contract.SendPayment(&_Payment.TransactOpts, receiver)
}

// SendPayment is a paid mutator transaction binding the contract method 0x8a7644a8.
//
// Solidity: function sendPayment(address receiver) payable returns()
func (_Payment *PaymentTransactorSession) SendPayment(receiver common.Address) (*types.Transaction, error) {
	return _Payment.Contract.SendPayment(&_Payment.TransactOpts, receiver)
}

// SettlePayment is a paid mutator transaction binding the contract method 0x7bf905aa.
//
// Solidity: function settlePayment() returns()
func (_Payment *PaymentTransactor) SettlePayment(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Payment.contract.Transact(opts, "settlePayment")
}

// SettlePayment is a paid mutator transaction binding the contract method 0x7bf905aa.
//
// Solidity: function settlePayment() returns()
func (_Payment *PaymentSession) SettlePayment() (*types.Transaction, error) {
	return _Payment.Contract.SettlePayment(&_Payment.TransactOpts)
}

// SettlePayment is a paid mutator transaction binding the contract method 0x7bf905aa.
//
// Solidity: function settlePayment() returns()
func (_Payment *PaymentTransactorSession) SettlePayment() (*types.Transaction, error) {
	return _Payment.Contract.SettlePayment(&_Payment.TransactOpts)
}

// PaymentCancelPaymentIterator is returned from FilterCancelPayment and is used to iterate over the raw logs and unpacked data for CancelPayment events raised by the Payment contract.
type PaymentCancelPaymentIterator struct {
	Event *PaymentCancelPayment // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  klaytn.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PaymentCancelPaymentIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PaymentCancelPayment)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PaymentCancelPayment)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PaymentCancelPaymentIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PaymentCancelPaymentIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PaymentCancelPayment represents a CancelPayment event raised by the Payment contract.
type PaymentCancelPayment struct {
	Sender   common.Address
	Receiver common.Address
	Amount   *big.Int
	Hash     [32]byte
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterCancelPayment is a free log retrieval operation binding the contract event 0xb98c9e666d94d223eae878b17953ea6ffa9958b5f0bb4b750cb0ed5ab8559c2a.
//
// Solidity: event CancelPayment(address sender, address receiver, uint256 amount, bytes32 hash)
func (_Payment *PaymentFilterer) FilterCancelPayment(opts *bind.FilterOpts) (*PaymentCancelPaymentIterator, error) {

	logs, sub, err := _Payment.contract.FilterLogs(opts, "CancelPayment")
	if err != nil {
		return nil, err
	}
	return &PaymentCancelPaymentIterator{contract: _Payment.contract, event: "CancelPayment", logs: logs, sub: sub}, nil
}

// WatchCancelPayment is a free log subscription operation binding the contract event 0xb98c9e666d94d223eae878b17953ea6ffa9958b5f0bb4b750cb0ed5ab8559c2a.
//
// Solidity: event CancelPayment(address sender, address receiver, uint256 amount, bytes32 hash)
func (_Payment *PaymentFilterer) WatchCancelPayment(opts *bind.WatchOpts, sink chan<- *PaymentCancelPayment) (event.Subscription, error) {

	logs, sub, err := _Payment.contract.WatchLogs(opts, "CancelPayment")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PaymentCancelPayment)
				if err := _Payment.contract.UnpackLog(event, "CancelPayment", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCancelPayment is a log parse operation binding the contract event 0xb98c9e666d94d223eae878b17953ea6ffa9958b5f0bb4b750cb0ed5ab8559c2a.
//
// Solidity: event CancelPayment(address sender, address receiver, uint256 amount, bytes32 hash)
func (_Payment *PaymentFilterer) ParseCancelPayment(log types.Log) (*PaymentCancelPayment, error) {
	event := new(PaymentCancelPayment)
	if err := _Payment.contract.UnpackLog(event, "CancelPayment", log); err != nil {
		return nil, err
	}
	return event, nil
}

// PaymentSendPaymentIterator is returned from FilterSendPayment and is used to iterate over the raw logs and unpacked data for SendPayment events raised by the Payment contract.
type PaymentSendPaymentIterator struct {
	Event *PaymentSendPayment // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  klaytn.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PaymentSendPaymentIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PaymentSendPayment)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PaymentSendPayment)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PaymentSendPaymentIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PaymentSendPaymentIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PaymentSendPayment represents a SendPayment event raised by the Payment contract.
type PaymentSendPayment struct {
	Sender   common.Address
	Receiver common.Address
	Amount   *big.Int
	Hash     [32]byte
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterSendPayment is a free log retrieval operation binding the contract event 0xa73936678f59aee66a2252d7c8b337ad416bc536c6a98ff626d041e75e795637.
//
// Solidity: event SendPayment(address sender, address receiver, uint256 amount, bytes32 hash)
func (_Payment *PaymentFilterer) FilterSendPayment(opts *bind.FilterOpts) (*PaymentSendPaymentIterator, error) {

	logs, sub, err := _Payment.contract.FilterLogs(opts, "SendPayment")
	if err != nil {
		return nil, err
	}
	return &PaymentSendPaymentIterator{contract: _Payment.contract, event: "SendPayment", logs: logs, sub: sub}, nil
}

// WatchSendPayment is a free log subscription operation binding the contract event 0xa73936678f59aee66a2252d7c8b337ad416bc536c6a98ff626d041e75e795637.
//
// Solidity: event SendPayment(address sender, address receiver, uint256 amount, bytes32 hash)
func (_Payment *PaymentFilterer) WatchSendPayment(opts *bind.WatchOpts, sink chan<- *PaymentSendPayment) (event.Subscription, error) {

	logs, sub, err := _Payment.contract.WatchLogs(opts, "SendPayment")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PaymentSendPayment)
				if err := _Payment.contract.UnpackLog(event, "SendPayment", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSendPayment is a log parse operation binding the contract event 0xa73936678f59aee66a2252d7c8b337ad416bc536c6a98ff626d041e75e795637.
//
// Solidity: event SendPayment(address sender, address receiver, uint256 amount, bytes32 hash)
func (_Payment *PaymentFilterer) ParseSendPayment(log types.Log) (*PaymentSendPayment, error) {
	event := new(PaymentSendPayment)
	if err := _Payment.contract.UnpackLog(event, "SendPayment", log); err != nil {
		return nil, err
	}
	return event, nil
}

// PaymentSettlePaymentIterator is returned from FilterSettlePayment and is used to iterate over the raw logs and unpacked data for SettlePayment events raised by the Payment contract.
type PaymentSettlePaymentIterator struct {
	Event *PaymentSettlePayment // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  klaytn.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PaymentSettlePaymentIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PaymentSettlePayment)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PaymentSettlePayment)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PaymentSettlePaymentIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PaymentSettlePaymentIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PaymentSettlePayment represents a SettlePayment event raised by the Payment contract.
type PaymentSettlePayment struct {
	Sender   common.Address
	Receiver common.Address
	Amount   *big.Int
	Hash     [32]byte
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterSettlePayment is a free log retrieval operation binding the contract event 0x1dad408564bbadde3286d1e89c8439bb753840ba6123a326442ca7eb0c2dada1.
//
// Solidity: event SettlePayment(address sender, address receiver, uint256 amount, bytes32 hash)
func (_Payment *PaymentFilterer) FilterSettlePayment(opts *bind.FilterOpts) (*PaymentSettlePaymentIterator, error) {

	logs, sub, err := _Payment.contract.FilterLogs(opts, "SettlePayment")
	if err != nil {
		return nil, err
	}
	return &PaymentSettlePaymentIterator{contract: _Payment.contract, event: "SettlePayment", logs: logs, sub: sub}, nil
}

// WatchSettlePayment is a free log subscription operation binding the contract event 0x1dad408564bbadde3286d1e89c8439bb753840ba6123a326442ca7eb0c2dada1.
//
// Solidity: event SettlePayment(address sender, address receiver, uint256 amount, bytes32 hash)
func (_Payment *PaymentFilterer) WatchSettlePayment(opts *bind.WatchOpts, sink chan<- *PaymentSettlePayment) (event.Subscription, error) {

	logs, sub, err := _Payment.contract.WatchLogs(opts, "SettlePayment")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PaymentSettlePayment)
				if err := _Payment.contract.UnpackLog(event, "SettlePayment", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSettlePayment is a log parse operation binding the contract event 0x1dad408564bbadde3286d1e89c8439bb753840ba6123a326442ca7eb0c2dada1.
//
// Solidity: event SettlePayment(address sender, address receiver, uint256 amount, bytes32 hash)
func (_Payment *PaymentFilterer) ParseSettlePayment(log types.Log) (*PaymentSettlePayment, error) {
	event := new(PaymentSettlePayment)
	if err := _Payment.contract.UnpackLog(event, "SettlePayment", log); err != nil {
		return nil, err
	}
	return event, nil
}

// PaymentTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the Payment contract.
type PaymentTransferIterator struct {
	Event *PaymentTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  klaytn.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PaymentTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PaymentTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PaymentTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PaymentTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PaymentTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PaymentTransfer represents a Transfer event raised by the Payment contract.
type PaymentTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address from, address to, uint256 value)
func (_Payment *PaymentFilterer) FilterTransfer(opts *bind.FilterOpts) (*PaymentTransferIterator, error) {

	logs, sub, err := _Payment.contract.FilterLogs(opts, "Transfer")
	if err != nil {
		return nil, err
	}
	return &PaymentTransferIterator{contract: _Payment.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address from, address to, uint256 value)
func (_Payment *PaymentFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *PaymentTransfer) (event.Subscription, error) {

	logs, sub, err := _Payment.contract.WatchLogs(opts, "Transfer")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PaymentTransfer)
				if err := _Payment.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address from, address to, uint256 value)
func (_Payment *PaymentFilterer) ParseTransfer(log types.Log) (*PaymentTransfer, error) {
	event := new(PaymentTransfer)
	if err := _Payment.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	return event, nil
}

// QueueABI is the input ABI used to generate the binding from.
const QueueABI = "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"dequeue\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"data\",\"type\":\"bytes32\"}],\"name\":\"enqueue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAll\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"peek\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"

// QueueBinRuntime is the compiled bytecode used for adding genesis block without deploying code.
const QueueBinRuntime = `608060405234801561001057600080fd5b506004361061004c5760003560e01c806353ed51431461005157806359e02dd71461006f578063957908d114610085578063b4de3e231461008d575b600080fd5b6100596100a2565b6040516100669190610323565b60405180910390f35b6100776101a9565b604051908152602001610066565b6100776101fe565b6100a061009b36600461030a565b6102b4565b005b6003546060906001600160a01b031633146100d85760405162461bcd60e51b81526004016100cf90610367565b60405180910390fd5b600060015460025460016100ec919061039e565b6100f691906103b6565b67ffffffffffffffff81111561010e5761010e610414565b604051908082528060200260200182016040528015610137578160200160208202803683370190505b509050600154600254101561014b57905090565b6001545b60025481116101a357600081815260208190526040902054600154839061017690846103b6565b81518110610186576101866103fe565b60209081029190910101528061019b816103cd565b91505061014f565b50905090565b6003546000906001600160a01b031633146101d65760405162461bcd60e51b81526004016100cf90610367565b60015460025410156101e85750600090565b5060015460009081526020819052604090205490565b6003546000906001600160a01b0316331461022b5760405162461bcd60e51b81526004016100cf90610367565b600154600254101561027f5760405162461bcd60e51b815260206004820181905260248201527f556e61626c6520746f206465717565756520616e20656d70747920717565756560448201526064016100cf565b600180546000908152602081905260408120805490829055825490929182916102a990839061039e565b909155509091505090565b6003546001600160a01b031633146102de5760405162461bcd60e51b81526004016100cf90610367565b6001600260008282546102f1919061039e565b9091555050600254600090815260208190526040902055565b60006020828403121561031c57600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b8181101561035b5783518352928401929184019160010161033f565b50909695505050505050565b6020808252601d908201527f4f6e6c7920636f6e7472616374206f776e65722063616e2063616c6c2e000000604082015260600190565b600082198211156103b1576103b16103e8565b500190565b6000828210156103c8576103c86103e8565b500390565b60006000198214156103e1576103e16103e8565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea264697066735822122097827ba70323df3df59d2f32055a685b12c8ee0696dafb407d664e9b2f9d62fc64736f6c63430008070033`

// QueueFuncSigs maps the 4-byte function signature to its string representation.
var QueueFuncSigs = map[string]string{
	"957908d1": "dequeue()",
	"b4de3e23": "enqueue(bytes32)",
	"53ed5143": "getAll()",
	"59e02dd7": "peek()",
}

// QueueBin is the compiled bytecode used for deploying new contracts.
var QueueBin = "0x608060405260018055600060025534801561001957600080fd5b50600380546001600160a01b031916331790556104608061003b6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806353ed51431461005157806359e02dd71461006f578063957908d114610085578063b4de3e231461008d575b600080fd5b6100596100a2565b6040516100669190610323565b60405180910390f35b6100776101a9565b604051908152602001610066565b6100776101fe565b6100a061009b36600461030a565b6102b4565b005b6003546060906001600160a01b031633146100d85760405162461bcd60e51b81526004016100cf90610367565b60405180910390fd5b600060015460025460016100ec919061039e565b6100f691906103b6565b67ffffffffffffffff81111561010e5761010e610414565b604051908082528060200260200182016040528015610137578160200160208202803683370190505b509050600154600254101561014b57905090565b6001545b60025481116101a357600081815260208190526040902054600154839061017690846103b6565b81518110610186576101866103fe565b60209081029190910101528061019b816103cd565b91505061014f565b50905090565b6003546000906001600160a01b031633146101d65760405162461bcd60e51b81526004016100cf90610367565b60015460025410156101e85750600090565b5060015460009081526020819052604090205490565b6003546000906001600160a01b0316331461022b5760405162461bcd60e51b81526004016100cf90610367565b600154600254101561027f5760405162461bcd60e51b815260206004820181905260248201527f556e61626c6520746f206465717565756520616e20656d70747920717565756560448201526064016100cf565b600180546000908152602081905260408120805490829055825490929182916102a990839061039e565b909155509091505090565b6003546001600160a01b031633146102de5760405162461bcd60e51b81526004016100cf90610367565b6001600260008282546102f1919061039e565b9091555050600254600090815260208190526040902055565b60006020828403121561031c57600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b8181101561035b5783518352928401929184019160010161033f565b50909695505050505050565b6020808252601d908201527f4f6e6c7920636f6e7472616374206f776e65722063616e2063616c6c2e000000604082015260600190565b600082198211156103b1576103b16103e8565b500190565b6000828210156103c8576103c86103e8565b500390565b60006000198214156103e1576103e16103e8565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea264697066735822122097827ba70323df3df59d2f32055a685b12c8ee0696dafb407d664e9b2f9d62fc64736f6c63430008070033"

// DeployQueue deploys a new Klaytn contract, binding an instance of Queue to it.
func DeployQueue(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Queue, error) {
	parsed, err := abi.JSON(strings.NewReader(QueueABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(QueueBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Queue{QueueCaller: QueueCaller{contract: contract}, QueueTransactor: QueueTransactor{contract: contract}, QueueFilterer: QueueFilterer{contract: contract}}, nil
}

// Queue is an auto generated Go binding around a Klaytn contract.
type Queue struct {
	QueueCaller     // Read-only binding to the contract
	QueueTransactor // Write-only binding to the contract
	QueueFilterer   // Log filterer for contract events
}

// QueueCaller is an auto generated read-only Go binding around a Klaytn contract.
type QueueCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// QueueTransactor is an auto generated write-only Go binding around a Klaytn contract.
type QueueTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// QueueFilterer is an auto generated log filtering Go binding around a Klaytn contract events.
type QueueFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// QueueSession is an auto generated Go binding around a Klaytn contract,
// with pre-set call and transact options.
type QueueSession struct {
	Contract     *Queue            // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// QueueCallerSession is an auto generated read-only Go binding around a Klaytn contract,
// with pre-set call options.
type QueueCallerSession struct {
	Contract *QueueCaller  // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// QueueTransactorSession is an auto generated write-only Go binding around a Klaytn contract,
// with pre-set transact options.
type QueueTransactorSession struct {
	Contract     *QueueTransactor  // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// QueueRaw is an auto generated low-level Go binding around a Klaytn contract.
type QueueRaw struct {
	Contract *Queue // Generic contract binding to access the raw methods on
}

// QueueCallerRaw is an auto generated low-level read-only Go binding around a Klaytn contract.
type QueueCallerRaw struct {
	Contract *QueueCaller // Generic read-only contract binding to access the raw methods on
}

// QueueTransactorRaw is an auto generated low-level write-only Go binding around a Klaytn contract.
type QueueTransactorRaw struct {
	Contract *QueueTransactor // Generic write-only contract binding to access the raw methods on
}

// NewQueue creates a new instance of Queue, bound to a specific deployed contract.
func NewQueue(address common.Address, backend bind.ContractBackend) (*Queue, error) {
	contract, err := bindQueue(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Queue{QueueCaller: QueueCaller{contract: contract}, QueueTransactor: QueueTransactor{contract: contract}, QueueFilterer: QueueFilterer{contract: contract}}, nil
}

// NewQueueCaller creates a new read-only instance of Queue, bound to a specific deployed contract.
func NewQueueCaller(address common.Address, caller bind.ContractCaller) (*QueueCaller, error) {
	contract, err := bindQueue(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &QueueCaller{contract: contract}, nil
}

// NewQueueTransactor creates a new write-only instance of Queue, bound to a specific deployed contract.
func NewQueueTransactor(address common.Address, transactor bind.ContractTransactor) (*QueueTransactor, error) {
	contract, err := bindQueue(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &QueueTransactor{contract: contract}, nil
}

// NewQueueFilterer creates a new log filterer instance of Queue, bound to a specific deployed contract.
func NewQueueFilterer(address common.Address, filterer bind.ContractFilterer) (*QueueFilterer, error) {
	contract, err := bindQueue(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &QueueFilterer{contract: contract}, nil
}

// bindQueue binds a generic wrapper to an already deployed contract.
func bindQueue(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(QueueABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Queue *QueueRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Queue.Contract.QueueCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Queue *QueueRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Queue.Contract.QueueTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Queue *QueueRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Queue.Contract.QueueTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Queue *QueueCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Queue.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Queue *QueueTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Queue.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Queue *QueueTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Queue.Contract.contract.Transact(opts, method, params...)
}

// GetAll is a free data retrieval call binding the contract method 0x53ed5143.
//
// Solidity: function getAll() view returns(bytes32[])
func (_Queue *QueueCaller) GetAll(opts *bind.CallOpts) ([][32]byte, error) {
	var (
		ret0 = new([][32]byte)
	)
	out := ret0
	err := _Queue.contract.Call(opts, out, "getAll")
	return *ret0, err
}

// GetAll is a free data retrieval call binding the contract method 0x53ed5143.
//
// Solidity: function getAll() view returns(bytes32[])
func (_Queue *QueueSession) GetAll() ([][32]byte, error) {
	return _Queue.Contract.GetAll(&_Queue.CallOpts)
}

// GetAll is a free data retrieval call binding the contract method 0x53ed5143.
//
// Solidity: function getAll() view returns(bytes32[])
func (_Queue *QueueCallerSession) GetAll() ([][32]byte, error) {
	return _Queue.Contract.GetAll(&_Queue.CallOpts)
}

// Peek is a free data retrieval call binding the contract method 0x59e02dd7.
//
// Solidity: function peek() view returns(bytes32)
func (_Queue *QueueCaller) Peek(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Queue.contract.Call(opts, out, "peek")
	return *ret0, err
}

// Peek is a free data retrieval call binding the contract method 0x59e02dd7.
//
// Solidity: function peek() view returns(bytes32)
func (_Queue *QueueSession) Peek() ([32]byte, error) {
	return _Queue.Contract.Peek(&_Queue.CallOpts)
}

// Peek is a free data retrieval call binding the contract method 0x59e02dd7.
//
// Solidity: function peek() view returns(bytes32)
func (_Queue *QueueCallerSession) Peek() ([32]byte, error) {
	return _Queue.Contract.Peek(&_Queue.CallOpts)
}

// Dequeue is a paid mutator transaction binding the contract method 0x957908d1.
//
// Solidity: function dequeue() returns(bytes32)
func (_Queue *QueueTransactor) Dequeue(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Queue.contract.Transact(opts, "dequeue")
}

// Dequeue is a paid mutator transaction binding the contract method 0x957908d1.
//
// Solidity: function dequeue() returns(bytes32)
func (_Queue *QueueSession) Dequeue() (*types.Transaction, error) {
	return _Queue.Contract.Dequeue(&_Queue.TransactOpts)
}

// Dequeue is a paid mutator transaction binding the contract method 0x957908d1.
//
// Solidity: function dequeue() returns(bytes32)
func (_Queue *QueueTransactorSession) Dequeue() (*types.Transaction, error) {
	return _Queue.Contract.Dequeue(&_Queue.TransactOpts)
}

// Enqueue is a paid mutator transaction binding the contract method 0xb4de3e23.
//
// Solidity: function enqueue(bytes32 data) returns()
func (_Queue *QueueTransactor) Enqueue(opts *bind.TransactOpts, data [32]byte) (*types.Transaction, error) {
	return _Queue.contract.Transact(opts, "enqueue", data)
}

// Enqueue is a paid mutator transaction binding the contract method 0xb4de3e23.
//
// Solidity: function enqueue(bytes32 data) returns()
func (_Queue *QueueSession) Enqueue(data [32]byte) (*types.Transaction, error) {
	return _Queue.Contract.Enqueue(&_Queue.TransactOpts, data)
}

// Enqueue is a paid mutator transaction binding the contract method 0xb4de3e23.
//
// Solidity: function enqueue(bytes32 data) returns()
func (_Queue *QueueTransactorSession) Enqueue(data [32]byte) (*types.Transaction, error) {
	return _Queue.Contract.Enqueue(&_Queue.TransactOpts, data)
}
