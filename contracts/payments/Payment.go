// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package payments

import (
	"math/big"
	"strings"

	"github.com/klaytn/klaytn"
	"github.com/klaytn/klaytn/accounts/abi"
	"github.com/klaytn/klaytn/accounts/abi/bind"
	"github.com/klaytn/klaytn/blockchain/types"
	"github.com/klaytn/klaytn/common"
	"github.com/klaytn/klaytn/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = klaytn.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// SendInfo is an auto generated low-level Go binding around an user-defined struct.
type SendInfo struct {
	Sender      common.Address
	Receiver    common.Address
	Amount      *big.Int
	BlockNumber *big.Int
}

// PaymentABI is the input ABI used to generate the binding from.
const PaymentABI = "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_settleInterval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"CancelPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"SendPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"SettlePayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"txHash\",\"type\":\"bytes32\"}],\"name\":\"cancelPayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"txHash\",\"type\":\"bytes32\"}],\"name\":\"getPaymentInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"internalType\":\"structSendInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"getPayments\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSettleInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"getSettleablePayments\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"txHash\",\"type\":\"bytes32\"}],\"name\":\"isAbleToSettle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"sendPayment\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settlePayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// PaymentBinRuntime is the compiled bytecode used for adding genesis block without deploying code.
const PaymentBinRuntime = `60806040526004361061007b5760003560e01c80638a7644a81161004e5780638a7644a81461010b578063a75e9b191461011e578063c46e96781461017f578063fa3b2d9f1461019f57600080fd5b80630928decd146100805780631d6a1711146100b65780637bf905aa146100d65780637fb0dacc146100ed575b600080fd5b34801561008c57600080fd5b506100a061009b366004610ebf565b6101cf565b6040516100ad9190610ee8565b60405180910390f35b3480156100c257600080fd5b506100a06100d1366004610ebf565b6103f2565b3480156100e257600080fd5b506100eb6105e6565b005b3480156100f957600080fd5b506002546040519081526020016100ad565b6100eb610119366004610ebf565b6108eb565b34801561012a57600080fd5b5061013e610139366004610f2c565b610b91565b6040516100ad919081516001600160a01b03908116825260208084015190911690820152604080830151908201526060918201519181019190915260800190565b34801561018b57600080fd5b506100eb61019a366004610f2c565b610c38565b3480156101ab57600080fd5b506101bf6101ba366004610f2c565b610e0b565b60405190151581526020016100ad565b6001600160a01b03818116600090815260208190526040902054606091166101f957506060919050565b6001600160a01b038083166000908152602081905260408082205481516353ed514360e01b81529151929316916353ed5143916004808201928692909190829003018186803b15801561024b57600080fd5b505afa15801561025f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102879190810190610f5b565b90506000805b82518110156103055760008382815181106102aa576102aa611019565b6020026020010151905060016000828152602001908152602001600020600201546000141580156102df57506102df81610e4b565b156102f257826102ee81611045565b9350505b50806102fd81611045565b91505061028d565b5060008167ffffffffffffffff81111561032157610321610f45565b60405190808252806020026020018201604052801561034a578160200160208202803683370190505b5090506000805b84518110156103e757600085828151811061036e5761036e611019565b6020026020010151905060016000828152602001908152602001600020600201546000141580156103a357506103a381610e4b565b156103d457808484815181106103bb576103bb611019565b6020908102919091010152826103d081611045565b9350505b50806103df81611045565b915050610351565b509095945050505050565b6001600160a01b038181166000908152602081905260409020546060911661041c57506060919050565b6001600160a01b038083166000908152602081905260408082205481516353ed514360e01b81529151929316916353ed5143916004808201928692909190829003018186803b15801561046e57600080fd5b505afa158015610482573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104aa9190810190610f5b565b90506000805b82518110156105165760008382815181106104cd576104cd611019565b60200260200101519050600160008281526020019081526020016000206002015460001461050357826104ff81611045565b9350505b508061050e81611045565b9150506104b0565b5060008167ffffffffffffffff81111561053257610532610f45565b60405190808252806020026020018201604052801561055b578160200160208202803683370190505b5090506000805b84518110156103e757600085828151811061057f5761057f611019565b6020026020010151905060016000828152602001908152602001600020600201546000146105d357808484815181106105ba576105ba611019565b6020908102919091010152826105cf81611045565b9350505b50806105de81611045565b915050610562565b336000908152602081905260409020546001600160a01b031661060557565b336000908152602081905260409020546001600160a01b03165b806001600160a01b03166359e02dd76040518163ffffffff1660e01b815260040160206040518083038186803b15801561065857600080fd5b505afa15801561066c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106909190611060565b158015906107125750610712816001600160a01b03166359e02dd76040518163ffffffff1660e01b815260040160206040518083038186803b1580156106d557600080fd5b505afa1580156106e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070d9190611060565b610e4b565b156108e8576000816001600160a01b031663957908d16040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561075457600080fd5b505af1158015610768573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078c9190611060565b6000818152600160205260409020600201549091506107ab575061061f565b60008181526001602081905260408083209182015460029092015490516001600160a01b03909216929091839183156108fc02918491818181858888f193505050501580156107fe573d6000803e3d6000fd5b50604080513081526001600160a01b03841660208201529081018290527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060600160405180910390a160008381526001602081905260409182902080549181015460029091015492517f1dad408564bbadde3286d1e89c8439bb753840ba6123a326442ca7eb0c2dada1936108a3936001600160a01b039081169316918890611079565b60405180910390a150506000908152600160208190526040822080546001600160a01b031990811682559181018054909216909155600281018290556003015561061f565b50565b346109365760405162461bcd60e51b81526020600482015260166024820152750616d6f756e742073686f756c64206e6f7420626520360541b60448201526064015b60405180910390fd5b6001600160a01b03818116600090815260208190526040902054166109ae5760405161096190610eb2565b604051809103906000f08015801561097d573d6000803e3d6000fd5b506001600160a01b03828116600090815260208190526040902080546001600160a01b031916929091169190911790555b60408051608081018252338082526001600160a01b03841660208084019190915234838501819052436060808601829052600354965194811b6bffffffffffffffffffffffff199081169486019490945287901b90921660348401526048830152606882015260888101929092529060009060029060a80160408051601f1981840301815290829052610a40916110a2565b602060405180830381855afa158015610a5d573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190610a809190611060565b6003805460010190556001600160a01b038481166000908152602081905260409081902054905163b4de3e2360e01b815260048101849052929350169063b4de3e2390602401600060405180830381600087803b158015610ae057600080fd5b505af1158015610af4573d6000803e3d6000fd5b505050600082815260016020818152604092839020865181546001600160a01b03199081166001600160a01b0392831617835592880151938201805490931693169290921790558482015160028201556060850151600390910155517fa73936678f59aee66a2252d7c8b337ad416bc536c6a98ff626d041e75e7956379150610b84903390869034908690611079565b60405180910390a1505050565b6040805160808101825260008082526020820181905291810182905260608101919091526000828152600160205260409020600201548290610be55760405162461bcd60e51b815260040161092d906110dd565b5050600090815260016020818152604092839020835160808101855281546001600160a01b0390811682529382015490931691830191909152600281015492820192909252600390910154606082015290565b6000818152600160205260409020600201548190610c685760405162461bcd60e51b815260040161092d906110dd565b6000828152600160208190526040909120015482906001600160a01b03163314610cd45760405162461bcd60e51b815260206004820152601760248201527f4f6e6c792072656365697665722063616e2063616c6c2e000000000000000000604482015260640161092d565b600083815260016020526040808220805460029091015491516001600160a01b0390911692839183156108fc0291849190818181858888f19350505050158015610d22573d6000803e3d6000fd5b50604080513081526001600160a01b03841660208201529081018290527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060600160405180910390a160008581526001602081905260409182902080549181015460029091015492517fa73936678f59aee66a2252d7c8b337ad416bc536c6a98ff626d041e75e79563793610dc7936001600160a01b039081169316918a90611079565b60405180910390a1505050600091825250600160208190526040822080546001600160a01b0319908116825591810180549092169091556002810182905560030155565b6000818152600160205260408120600201548290610e3b5760405162461bcd60e51b815260040161092d906110dd565b610e4483610e4b565b9392505050565b6000818152600160208181526040808420815160808101835281546001600160a01b0390811682529482015490941692840192909252600280830154918401919091526003909101546060830181905290544391610ea99190611114565b11159392505050565b61049b8061112d83390190565b600060208284031215610ed157600080fd5b81356001600160a01b0381168114610e4457600080fd5b6020808252825182820181905260009190848201906040850190845b81811015610f2057835183529284019291840191600101610f04565b50909695505050505050565b600060208284031215610f3e57600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b60006020808385031215610f6e57600080fd5b825167ffffffffffffffff80821115610f8657600080fd5b818501915085601f830112610f9a57600080fd5b815181811115610fac57610fac610f45565b8060051b604051601f19603f83011681018181108582111715610fd157610fd1610f45565b604052918252848201925083810185019188831115610fef57600080fd5b938501935b8285101561100d57845184529385019392850192610ff4565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006000198214156110595761105961102f565b5060010190565b60006020828403121561107257600080fd5b5051919050565b6001600160a01b0394851681529290931660208301526040820152606081019190915260800190565b6000825160005b818110156110c357602081860181015185830152016110a9565b818111156110d2576000828501525b509190910192915050565b6020808252601b908201527f537563682074784861736820646f6573206e6f742065786973742e0000000000604082015260600190565b600082198211156111275761112761102f565b50019056fe608060405260018055600060025534801561001957600080fd5b50600380546001600160a01b031916331790556104608061003b6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806353ed51431461005157806359e02dd71461006f578063957908d114610085578063b4de3e231461008d575b600080fd5b6100596100a2565b604051610066919061030a565b60405180910390f35b6100776101a9565b604051908152602001610066565b6100776101fe565b6100a061009b36600461034e565b6102b4565b005b6003546060906001600160a01b031633146100d85760405162461bcd60e51b81526004016100cf90610367565b60405180910390fd5b600060015460025460016100ec91906103b4565b6100f691906103cc565b67ffffffffffffffff81111561010e5761010e6103e3565b604051908082528060200260200182016040528015610137578160200160208202803683370190505b509050600154600254101561014b57905090565b6001545b60025481116101a357600081815260208190526040902054600154839061017690846103cc565b81518110610186576101866103f9565b60209081029190910101528061019b8161040f565b91505061014f565b50905090565b6003546000906001600160a01b031633146101d65760405162461bcd60e51b81526004016100cf90610367565b60015460025410156101e85750600090565b5060015460009081526020819052604090205490565b6003546000906001600160a01b0316331461022b5760405162461bcd60e51b81526004016100cf90610367565b600154600254101561027f5760405162461bcd60e51b815260206004820181905260248201527f556e61626c6520746f206465717565756520616e20656d70747920717565756560448201526064016100cf565b600180546000908152602081905260408120805490829055825490929182916102a99083906103b4565b909155509091505090565b6003546001600160a01b031633146102de5760405162461bcd60e51b81526004016100cf90610367565b6001600260008282546102f191906103b4565b9091555050600254600090815260208190526040902055565b6020808252825182820181905260009190848201906040850190845b8181101561034257835183529284019291840191600101610326565b50909695505050505050565b60006020828403121561036057600080fd5b5035919050565b6020808252601d908201527f4f6e6c7920636f6e7472616374206f776e65722063616e2063616c6c2e000000604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600082198211156103c7576103c761039e565b500190565b6000828210156103de576103de61039e565b500390565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60006000198214156104235761042361039e565b506001019056fea26469706673582212202c2a0f16832d4d9a23d24ed3b3f6a560c31f63f7fa3245fe0a88da50043ef2b064736f6c63430008090033a2646970667358221220b90ce29b7843cd7a98a8d4c1e0ecc6b83ecc18e2f04f91d17a47c83e22c0377464736f6c63430008090033`

// PaymentFuncSigs maps the 4-byte function signature to its string representation.
var PaymentFuncSigs = map[string]string{
	"c46e9678": "cancelPayment(bytes32)",
	"a75e9b19": "getPaymentInfo(bytes32)",
	"1d6a1711": "getPayments(address)",
	"7fb0dacc": "getSettleInterval()",
	"0928decd": "getSettleablePayments(address)",
	"fa3b2d9f": "isAbleToSettle(bytes32)",
	"8a7644a8": "sendPayment(address)",
	"7bf905aa": "settlePayment()",
}

// PaymentBin is the compiled bytecode used for deploying new contracts.
var PaymentBin = "0x608060405234801561001057600080fd5b5060405161166c38038061166c83398101604081905261002f91610047565b6002819055806100415762278d006002555b50610060565b60006020828403121561005957600080fd5b5051919050565b6115fd8061006f6000396000f3fe60806040526004361061007b5760003560e01c80638a7644a81161004e5780638a7644a81461010b578063a75e9b191461011e578063c46e96781461017f578063fa3b2d9f1461019f57600080fd5b80630928decd146100805780631d6a1711146100b65780637bf905aa146100d65780637fb0dacc146100ed575b600080fd5b34801561008c57600080fd5b506100a061009b366004610ebf565b6101cf565b6040516100ad9190610ee8565b60405180910390f35b3480156100c257600080fd5b506100a06100d1366004610ebf565b6103f2565b3480156100e257600080fd5b506100eb6105e6565b005b3480156100f957600080fd5b506002546040519081526020016100ad565b6100eb610119366004610ebf565b6108eb565b34801561012a57600080fd5b5061013e610139366004610f2c565b610b91565b6040516100ad919081516001600160a01b03908116825260208084015190911690820152604080830151908201526060918201519181019190915260800190565b34801561018b57600080fd5b506100eb61019a366004610f2c565b610c38565b3480156101ab57600080fd5b506101bf6101ba366004610f2c565b610e0b565b60405190151581526020016100ad565b6001600160a01b03818116600090815260208190526040902054606091166101f957506060919050565b6001600160a01b038083166000908152602081905260408082205481516353ed514360e01b81529151929316916353ed5143916004808201928692909190829003018186803b15801561024b57600080fd5b505afa15801561025f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102879190810190610f5b565b90506000805b82518110156103055760008382815181106102aa576102aa611019565b6020026020010151905060016000828152602001908152602001600020600201546000141580156102df57506102df81610e4b565b156102f257826102ee81611045565b9350505b50806102fd81611045565b91505061028d565b5060008167ffffffffffffffff81111561032157610321610f45565b60405190808252806020026020018201604052801561034a578160200160208202803683370190505b5090506000805b84518110156103e757600085828151811061036e5761036e611019565b6020026020010151905060016000828152602001908152602001600020600201546000141580156103a357506103a381610e4b565b156103d457808484815181106103bb576103bb611019565b6020908102919091010152826103d081611045565b9350505b50806103df81611045565b915050610351565b509095945050505050565b6001600160a01b038181166000908152602081905260409020546060911661041c57506060919050565b6001600160a01b038083166000908152602081905260408082205481516353ed514360e01b81529151929316916353ed5143916004808201928692909190829003018186803b15801561046e57600080fd5b505afa158015610482573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104aa9190810190610f5b565b90506000805b82518110156105165760008382815181106104cd576104cd611019565b60200260200101519050600160008281526020019081526020016000206002015460001461050357826104ff81611045565b9350505b508061050e81611045565b9150506104b0565b5060008167ffffffffffffffff81111561053257610532610f45565b60405190808252806020026020018201604052801561055b578160200160208202803683370190505b5090506000805b84518110156103e757600085828151811061057f5761057f611019565b6020026020010151905060016000828152602001908152602001600020600201546000146105d357808484815181106105ba576105ba611019565b6020908102919091010152826105cf81611045565b9350505b50806105de81611045565b915050610562565b336000908152602081905260409020546001600160a01b031661060557565b336000908152602081905260409020546001600160a01b03165b806001600160a01b03166359e02dd76040518163ffffffff1660e01b815260040160206040518083038186803b15801561065857600080fd5b505afa15801561066c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106909190611060565b158015906107125750610712816001600160a01b03166359e02dd76040518163ffffffff1660e01b815260040160206040518083038186803b1580156106d557600080fd5b505afa1580156106e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070d9190611060565b610e4b565b156108e8576000816001600160a01b031663957908d16040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561075457600080fd5b505af1158015610768573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078c9190611060565b6000818152600160205260409020600201549091506107ab575061061f565b60008181526001602081905260408083209182015460029092015490516001600160a01b03909216929091839183156108fc02918491818181858888f193505050501580156107fe573d6000803e3d6000fd5b50604080513081526001600160a01b03841660208201529081018290527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060600160405180910390a160008381526001602081905260409182902080549181015460029091015492517f1dad408564bbadde3286d1e89c8439bb753840ba6123a326442ca7eb0c2dada1936108a3936001600160a01b039081169316918890611079565b60405180910390a150506000908152600160208190526040822080546001600160a01b031990811682559181018054909216909155600281018290556003015561061f565b50565b346109365760405162461bcd60e51b81526020600482015260166024820152750616d6f756e742073686f756c64206e6f7420626520360541b60448201526064015b60405180910390fd5b6001600160a01b03818116600090815260208190526040902054166109ae5760405161096190610eb2565b604051809103906000f08015801561097d573d6000803e3d6000fd5b506001600160a01b03828116600090815260208190526040902080546001600160a01b031916929091169190911790555b60408051608081018252338082526001600160a01b03841660208084019190915234838501819052436060808601829052600354965194811b6bffffffffffffffffffffffff199081169486019490945287901b90921660348401526048830152606882015260888101929092529060009060029060a80160408051601f1981840301815290829052610a40916110a2565b602060405180830381855afa158015610a5d573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190610a809190611060565b6003805460010190556001600160a01b038481166000908152602081905260409081902054905163b4de3e2360e01b815260048101849052929350169063b4de3e2390602401600060405180830381600087803b158015610ae057600080fd5b505af1158015610af4573d6000803e3d6000fd5b505050600082815260016020818152604092839020865181546001600160a01b03199081166001600160a01b0392831617835592880151938201805490931693169290921790558482015160028201556060850151600390910155517fa73936678f59aee66a2252d7c8b337ad416bc536c6a98ff626d041e75e7956379150610b84903390869034908690611079565b60405180910390a1505050565b6040805160808101825260008082526020820181905291810182905260608101919091526000828152600160205260409020600201548290610be55760405162461bcd60e51b815260040161092d906110dd565b5050600090815260016020818152604092839020835160808101855281546001600160a01b0390811682529382015490931691830191909152600281015492820192909252600390910154606082015290565b6000818152600160205260409020600201548190610c685760405162461bcd60e51b815260040161092d906110dd565b6000828152600160208190526040909120015482906001600160a01b03163314610cd45760405162461bcd60e51b815260206004820152601760248201527f4f6e6c792072656365697665722063616e2063616c6c2e000000000000000000604482015260640161092d565b600083815260016020526040808220805460029091015491516001600160a01b0390911692839183156108fc0291849190818181858888f19350505050158015610d22573d6000803e3d6000fd5b50604080513081526001600160a01b03841660208201529081018290527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060600160405180910390a160008581526001602081905260409182902080549181015460029091015492517fa73936678f59aee66a2252d7c8b337ad416bc536c6a98ff626d041e75e79563793610dc7936001600160a01b039081169316918a90611079565b60405180910390a1505050600091825250600160208190526040822080546001600160a01b0319908116825591810180549092169091556002810182905560030155565b6000818152600160205260408120600201548290610e3b5760405162461bcd60e51b815260040161092d906110dd565b610e4483610e4b565b9392505050565b6000818152600160208181526040808420815160808101835281546001600160a01b0390811682529482015490941692840192909252600280830154918401919091526003909101546060830181905290544391610ea99190611114565b11159392505050565b61049b8061112d83390190565b600060208284031215610ed157600080fd5b81356001600160a01b0381168114610e4457600080fd5b6020808252825182820181905260009190848201906040850190845b81811015610f2057835183529284019291840191600101610f04565b50909695505050505050565b600060208284031215610f3e57600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b60006020808385031215610f6e57600080fd5b825167ffffffffffffffff80821115610f8657600080fd5b818501915085601f830112610f9a57600080fd5b815181811115610fac57610fac610f45565b8060051b604051601f19603f83011681018181108582111715610fd157610fd1610f45565b604052918252848201925083810185019188831115610fef57600080fd5b938501935b8285101561100d57845184529385019392850192610ff4565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006000198214156110595761105961102f565b5060010190565b60006020828403121561107257600080fd5b5051919050565b6001600160a01b0394851681529290931660208301526040820152606081019190915260800190565b6000825160005b818110156110c357602081860181015185830152016110a9565b818111156110d2576000828501525b509190910192915050565b6020808252601b908201527f537563682074784861736820646f6573206e6f742065786973742e0000000000604082015260600190565b600082198211156111275761112761102f565b50019056fe608060405260018055600060025534801561001957600080fd5b50600380546001600160a01b031916331790556104608061003b6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806353ed51431461005157806359e02dd71461006f578063957908d114610085578063b4de3e231461008d575b600080fd5b6100596100a2565b604051610066919061030a565b60405180910390f35b6100776101a9565b604051908152602001610066565b6100776101fe565b6100a061009b36600461034e565b6102b4565b005b6003546060906001600160a01b031633146100d85760405162461bcd60e51b81526004016100cf90610367565b60405180910390fd5b600060015460025460016100ec91906103b4565b6100f691906103cc565b67ffffffffffffffff81111561010e5761010e6103e3565b604051908082528060200260200182016040528015610137578160200160208202803683370190505b509050600154600254101561014b57905090565b6001545b60025481116101a357600081815260208190526040902054600154839061017690846103cc565b81518110610186576101866103f9565b60209081029190910101528061019b8161040f565b91505061014f565b50905090565b6003546000906001600160a01b031633146101d65760405162461bcd60e51b81526004016100cf90610367565b60015460025410156101e85750600090565b5060015460009081526020819052604090205490565b6003546000906001600160a01b0316331461022b5760405162461bcd60e51b81526004016100cf90610367565b600154600254101561027f5760405162461bcd60e51b815260206004820181905260248201527f556e61626c6520746f206465717565756520616e20656d70747920717565756560448201526064016100cf565b600180546000908152602081905260408120805490829055825490929182916102a99083906103b4565b909155509091505090565b6003546001600160a01b031633146102de5760405162461bcd60e51b81526004016100cf90610367565b6001600260008282546102f191906103b4565b9091555050600254600090815260208190526040902055565b6020808252825182820181905260009190848201906040850190845b8181101561034257835183529284019291840191600101610326565b50909695505050505050565b60006020828403121561036057600080fd5b5035919050565b6020808252601d908201527f4f6e6c7920636f6e7472616374206f776e65722063616e2063616c6c2e000000604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600082198211156103c7576103c761039e565b500190565b6000828210156103de576103de61039e565b500390565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60006000198214156104235761042361039e565b506001019056fea26469706673582212202c2a0f16832d4d9a23d24ed3b3f6a560c31f63f7fa3245fe0a88da50043ef2b064736f6c63430008090033a2646970667358221220b90ce29b7843cd7a98a8d4c1e0ecc6b83ecc18e2f04f91d17a47c83e22c0377464736f6c63430008090033"

// DeployPayment deploys a new Klaytn contract, binding an instance of Payment to it.
func DeployPayment(auth *bind.TransactOpts, backend bind.ContractBackend, _settleInterval *big.Int) (common.Address, *types.Transaction, *Payment, error) {
	parsed, err := abi.JSON(strings.NewReader(PaymentABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(PaymentBin), backend, _settleInterval)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Payment{PaymentCaller: PaymentCaller{contract: contract}, PaymentTransactor: PaymentTransactor{contract: contract}, PaymentFilterer: PaymentFilterer{contract: contract}}, nil
}

// Payment is an auto generated Go binding around a Klaytn contract.
type Payment struct {
	PaymentCaller     // Read-only binding to the contract
	PaymentTransactor // Write-only binding to the contract
	PaymentFilterer   // Log filterer for contract events
}

// PaymentCaller is an auto generated read-only Go binding around a Klaytn contract.
type PaymentCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PaymentTransactor is an auto generated write-only Go binding around a Klaytn contract.
type PaymentTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PaymentFilterer is an auto generated log filtering Go binding around a Klaytn contract events.
type PaymentFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PaymentSession is an auto generated Go binding around a Klaytn contract,
// with pre-set call and transact options.
type PaymentSession struct {
	Contract     *Payment          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// PaymentCallerSession is an auto generated read-only Go binding around a Klaytn contract,
// with pre-set call options.
type PaymentCallerSession struct {
	Contract *PaymentCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// PaymentTransactorSession is an auto generated write-only Go binding around a Klaytn contract,
// with pre-set transact options.
type PaymentTransactorSession struct {
	Contract     *PaymentTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// PaymentRaw is an auto generated low-level Go binding around a Klaytn contract.
type PaymentRaw struct {
	Contract *Payment // Generic contract binding to access the raw methods on
}

// PaymentCallerRaw is an auto generated low-level read-only Go binding around a Klaytn contract.
type PaymentCallerRaw struct {
	Contract *PaymentCaller // Generic read-only contract binding to access the raw methods on
}

// PaymentTransactorRaw is an auto generated low-level write-only Go binding around a Klaytn contract.
type PaymentTransactorRaw struct {
	Contract *PaymentTransactor // Generic write-only contract binding to access the raw methods on
}

// NewPayment creates a new instance of Payment, bound to a specific deployed contract.
func NewPayment(address common.Address, backend bind.ContractBackend) (*Payment, error) {
	contract, err := bindPayment(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Payment{PaymentCaller: PaymentCaller{contract: contract}, PaymentTransactor: PaymentTransactor{contract: contract}, PaymentFilterer: PaymentFilterer{contract: contract}}, nil
}

// NewPaymentCaller creates a new read-only instance of Payment, bound to a specific deployed contract.
func NewPaymentCaller(address common.Address, caller bind.ContractCaller) (*PaymentCaller, error) {
	contract, err := bindPayment(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &PaymentCaller{contract: contract}, nil
}

// NewPaymentTransactor creates a new write-only instance of Payment, bound to a specific deployed contract.
func NewPaymentTransactor(address common.Address, transactor bind.ContractTransactor) (*PaymentTransactor, error) {
	contract, err := bindPayment(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &PaymentTransactor{contract: contract}, nil
}

// NewPaymentFilterer creates a new log filterer instance of Payment, bound to a specific deployed contract.
func NewPaymentFilterer(address common.Address, filterer bind.ContractFilterer) (*PaymentFilterer, error) {
	contract, err := bindPayment(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &PaymentFilterer{contract: contract}, nil
}

// bindPayment binds a generic wrapper to an already deployed contract.
func bindPayment(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(PaymentABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Payment *PaymentRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Payment.Contract.PaymentCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Payment *PaymentRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Payment.Contract.PaymentTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Payment *PaymentRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Payment.Contract.PaymentTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Payment *PaymentCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Payment.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Payment *PaymentTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Payment.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Payment *PaymentTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Payment.Contract.contract.Transact(opts, method, params...)
}

// GetPaymentInfo is a free data retrieval call binding the contract method 0xa75e9b19.
//
// Solidity: function getPaymentInfo(bytes32 txHash) view returns((address,address,uint256,uint256))
func (_Payment *PaymentCaller) GetPaymentInfo(opts *bind.CallOpts, txHash [32]byte) (SendInfo, error) {
	var (
		ret0 = new(SendInfo)
	)
	out := ret0
	err := _Payment.contract.Call(opts, out, "getPaymentInfo", txHash)
	return *ret0, err
}

// GetPaymentInfo is a free data retrieval call binding the contract method 0xa75e9b19.
//
// Solidity: function getPaymentInfo(bytes32 txHash) view returns((address,address,uint256,uint256))
func (_Payment *PaymentSession) GetPaymentInfo(txHash [32]byte) (SendInfo, error) {
	return _Payment.Contract.GetPaymentInfo(&_Payment.CallOpts, txHash)
}

// GetPaymentInfo is a free data retrieval call binding the contract method 0xa75e9b19.
//
// Solidity: function getPaymentInfo(bytes32 txHash) view returns((address,address,uint256,uint256))
func (_Payment *PaymentCallerSession) GetPaymentInfo(txHash [32]byte) (SendInfo, error) {
	return _Payment.Contract.GetPaymentInfo(&_Payment.CallOpts, txHash)
}

// GetPayments is a free data retrieval call binding the contract method 0x1d6a1711.
//
// Solidity: function getPayments(address receiver) view returns(bytes32[])
func (_Payment *PaymentCaller) GetPayments(opts *bind.CallOpts, receiver common.Address) ([][32]byte, error) {
	var (
		ret0 = new([][32]byte)
	)
	out := ret0
	err := _Payment.contract.Call(opts, out, "getPayments", receiver)
	return *ret0, err
}

// GetPayments is a free data retrieval call binding the contract method 0x1d6a1711.
//
// Solidity: function getPayments(address receiver) view returns(bytes32[])
func (_Payment *PaymentSession) GetPayments(receiver common.Address) ([][32]byte, error) {
	return _Payment.Contract.GetPayments(&_Payment.CallOpts, receiver)
}

// GetPayments is a free data retrieval call binding the contract method 0x1d6a1711.
//
// Solidity: function getPayments(address receiver) view returns(bytes32[])
func (_Payment *PaymentCallerSession) GetPayments(receiver common.Address) ([][32]byte, error) {
	return _Payment.Contract.GetPayments(&_Payment.CallOpts, receiver)
}

// GetSettleInterval is a free data retrieval call binding the contract method 0x7fb0dacc.
//
// Solidity: function getSettleInterval() view returns(uint256)
func (_Payment *PaymentCaller) GetSettleInterval(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Payment.contract.Call(opts, out, "getSettleInterval")
	return *ret0, err
}

// GetSettleInterval is a free data retrieval call binding the contract method 0x7fb0dacc.
//
// Solidity: function getSettleInterval() view returns(uint256)
func (_Payment *PaymentSession) GetSettleInterval() (*big.Int, error) {
	return _Payment.Contract.GetSettleInterval(&_Payment.CallOpts)
}

// GetSettleInterval is a free data retrieval call binding the contract method 0x7fb0dacc.
//
// Solidity: function getSettleInterval() view returns(uint256)
func (_Payment *PaymentCallerSession) GetSettleInterval() (*big.Int, error) {
	return _Payment.Contract.GetSettleInterval(&_Payment.CallOpts)
}

// GetSettleablePayments is a free data retrieval call binding the contract method 0x0928decd.
//
// Solidity: function getSettleablePayments(address receiver) view returns(bytes32[])
func (_Payment *PaymentCaller) GetSettleablePayments(opts *bind.CallOpts, receiver common.Address) ([][32]byte, error) {
	var (
		ret0 = new([][32]byte)
	)
	out := ret0
	err := _Payment.contract.Call(opts, out, "getSettleablePayments", receiver)
	return *ret0, err
}

// GetSettleablePayments is a free data retrieval call binding the contract method 0x0928decd.
//
// Solidity: function getSettleablePayments(address receiver) view returns(bytes32[])
func (_Payment *PaymentSession) GetSettleablePayments(receiver common.Address) ([][32]byte, error) {
	return _Payment.Contract.GetSettleablePayments(&_Payment.CallOpts, receiver)
}

// GetSettleablePayments is a free data retrieval call binding the contract method 0x0928decd.
//
// Solidity: function getSettleablePayments(address receiver) view returns(bytes32[])
func (_Payment *PaymentCallerSession) GetSettleablePayments(receiver common.Address) ([][32]byte, error) {
	return _Payment.Contract.GetSettleablePayments(&_Payment.CallOpts, receiver)
}

// IsAbleToSettle is a free data retrieval call binding the contract method 0xfa3b2d9f.
//
// Solidity: function isAbleToSettle(bytes32 txHash) view returns(bool)
func (_Payment *PaymentCaller) IsAbleToSettle(opts *bind.CallOpts, txHash [32]byte) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Payment.contract.Call(opts, out, "isAbleToSettle", txHash)
	return *ret0, err
}

// IsAbleToSettle is a free data retrieval call binding the contract method 0xfa3b2d9f.
//
// Solidity: function isAbleToSettle(bytes32 txHash) view returns(bool)
func (_Payment *PaymentSession) IsAbleToSettle(txHash [32]byte) (bool, error) {
	return _Payment.Contract.IsAbleToSettle(&_Payment.CallOpts, txHash)
}

// IsAbleToSettle is a free data retrieval call binding the contract method 0xfa3b2d9f.
//
// Solidity: function isAbleToSettle(bytes32 txHash) view returns(bool)
func (_Payment *PaymentCallerSession) IsAbleToSettle(txHash [32]byte) (bool, error) {
	return _Payment.Contract.IsAbleToSettle(&_Payment.CallOpts, txHash)
}

// CancelPayment is a paid mutator transaction binding the contract method 0xc46e9678.
//
// Solidity: function cancelPayment(bytes32 txHash) returns()
func (_Payment *PaymentTransactor) CancelPayment(opts *bind.TransactOpts, txHash [32]byte) (*types.Transaction, error) {
	return _Payment.contract.Transact(opts, "cancelPayment", txHash)
}

// CancelPayment is a paid mutator transaction binding the contract method 0xc46e9678.
//
// Solidity: function cancelPayment(bytes32 txHash) returns()
func (_Payment *PaymentSession) CancelPayment(txHash [32]byte) (*types.Transaction, error) {
	return _Payment.Contract.CancelPayment(&_Payment.TransactOpts, txHash)
}

// CancelPayment is a paid mutator transaction binding the contract method 0xc46e9678.
//
// Solidity: function cancelPayment(bytes32 txHash) returns()
func (_Payment *PaymentTransactorSession) CancelPayment(txHash [32]byte) (*types.Transaction, error) {
	return _Payment.Contract.CancelPayment(&_Payment.TransactOpts, txHash)
}

// SendPayment is a paid mutator transaction binding the contract method 0x8a7644a8.
//
// Solidity: function sendPayment(address receiver) payable returns()
func (_Payment *PaymentTransactor) SendPayment(opts *bind.TransactOpts, receiver common.Address) (*types.Transaction, error) {
	return _Payment.contract.Transact(opts, "sendPayment", receiver)
}

// SendPayment is a paid mutator transaction binding the contract method 0x8a7644a8.
//
// Solidity: function sendPayment(address receiver) payable returns()
func (_Payment *PaymentSession) SendPayment(receiver common.Address) (*types.Transaction, error) {
	return _Payment.Contract.SendPayment(&_Payment.TransactOpts, receiver)
}

// SendPayment is a paid mutator transaction binding the contract method 0x8a7644a8.
//
// Solidity: function sendPayment(address receiver) payable returns()
func (_Payment *PaymentTransactorSession) SendPayment(receiver common.Address) (*types.Transaction, error) {
	return _Payment.Contract.SendPayment(&_Payment.TransactOpts, receiver)
}

// SettlePayment is a paid mutator transaction binding the contract method 0x7bf905aa.
//
// Solidity: function settlePayment() returns()
func (_Payment *PaymentTransactor) SettlePayment(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Payment.contract.Transact(opts, "settlePayment")
}

// SettlePayment is a paid mutator transaction binding the contract method 0x7bf905aa.
//
// Solidity: function settlePayment() returns()
func (_Payment *PaymentSession) SettlePayment() (*types.Transaction, error) {
	return _Payment.Contract.SettlePayment(&_Payment.TransactOpts)
}

// SettlePayment is a paid mutator transaction binding the contract method 0x7bf905aa.
//
// Solidity: function settlePayment() returns()
func (_Payment *PaymentTransactorSession) SettlePayment() (*types.Transaction, error) {
	return _Payment.Contract.SettlePayment(&_Payment.TransactOpts)
}

// PaymentCancelPaymentIterator is returned from FilterCancelPayment and is used to iterate over the raw logs and unpacked data for CancelPayment events raised by the Payment contract.
type PaymentCancelPaymentIterator struct {
	Event *PaymentCancelPayment // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  klaytn.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PaymentCancelPaymentIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PaymentCancelPayment)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PaymentCancelPayment)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PaymentCancelPaymentIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PaymentCancelPaymentIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PaymentCancelPayment represents a CancelPayment event raised by the Payment contract.
type PaymentCancelPayment struct {
	Sender   common.Address
	Receiver common.Address
	Amount   *big.Int
	Hash     [32]byte
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterCancelPayment is a free log retrieval operation binding the contract event 0xb98c9e666d94d223eae878b17953ea6ffa9958b5f0bb4b750cb0ed5ab8559c2a.
//
// Solidity: event CancelPayment(address sender, address receiver, uint256 amount, bytes32 hash)
func (_Payment *PaymentFilterer) FilterCancelPayment(opts *bind.FilterOpts) (*PaymentCancelPaymentIterator, error) {

	logs, sub, err := _Payment.contract.FilterLogs(opts, "CancelPayment")
	if err != nil {
		return nil, err
	}
	return &PaymentCancelPaymentIterator{contract: _Payment.contract, event: "CancelPayment", logs: logs, sub: sub}, nil
}

// WatchCancelPayment is a free log subscription operation binding the contract event 0xb98c9e666d94d223eae878b17953ea6ffa9958b5f0bb4b750cb0ed5ab8559c2a.
//
// Solidity: event CancelPayment(address sender, address receiver, uint256 amount, bytes32 hash)
func (_Payment *PaymentFilterer) WatchCancelPayment(opts *bind.WatchOpts, sink chan<- *PaymentCancelPayment) (event.Subscription, error) {

	logs, sub, err := _Payment.contract.WatchLogs(opts, "CancelPayment")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PaymentCancelPayment)
				if err := _Payment.contract.UnpackLog(event, "CancelPayment", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCancelPayment is a log parse operation binding the contract event 0xb98c9e666d94d223eae878b17953ea6ffa9958b5f0bb4b750cb0ed5ab8559c2a.
//
// Solidity: event CancelPayment(address sender, address receiver, uint256 amount, bytes32 hash)
func (_Payment *PaymentFilterer) ParseCancelPayment(log types.Log) (*PaymentCancelPayment, error) {
	event := new(PaymentCancelPayment)
	if err := _Payment.contract.UnpackLog(event, "CancelPayment", log); err != nil {
		return nil, err
	}
	return event, nil
}

// PaymentSendPaymentIterator is returned from FilterSendPayment and is used to iterate over the raw logs and unpacked data for SendPayment events raised by the Payment contract.
type PaymentSendPaymentIterator struct {
	Event *PaymentSendPayment // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  klaytn.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PaymentSendPaymentIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PaymentSendPayment)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PaymentSendPayment)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PaymentSendPaymentIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PaymentSendPaymentIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PaymentSendPayment represents a SendPayment event raised by the Payment contract.
type PaymentSendPayment struct {
	Sender   common.Address
	Receiver common.Address
	Amount   *big.Int
	Hash     [32]byte
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterSendPayment is a free log retrieval operation binding the contract event 0xa73936678f59aee66a2252d7c8b337ad416bc536c6a98ff626d041e75e795637.
//
// Solidity: event SendPayment(address sender, address receiver, uint256 amount, bytes32 hash)
func (_Payment *PaymentFilterer) FilterSendPayment(opts *bind.FilterOpts) (*PaymentSendPaymentIterator, error) {

	logs, sub, err := _Payment.contract.FilterLogs(opts, "SendPayment")
	if err != nil {
		return nil, err
	}
	return &PaymentSendPaymentIterator{contract: _Payment.contract, event: "SendPayment", logs: logs, sub: sub}, nil
}

// WatchSendPayment is a free log subscription operation binding the contract event 0xa73936678f59aee66a2252d7c8b337ad416bc536c6a98ff626d041e75e795637.
//
// Solidity: event SendPayment(address sender, address receiver, uint256 amount, bytes32 hash)
func (_Payment *PaymentFilterer) WatchSendPayment(opts *bind.WatchOpts, sink chan<- *PaymentSendPayment) (event.Subscription, error) {

	logs, sub, err := _Payment.contract.WatchLogs(opts, "SendPayment")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PaymentSendPayment)
				if err := _Payment.contract.UnpackLog(event, "SendPayment", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSendPayment is a log parse operation binding the contract event 0xa73936678f59aee66a2252d7c8b337ad416bc536c6a98ff626d041e75e795637.
//
// Solidity: event SendPayment(address sender, address receiver, uint256 amount, bytes32 hash)
func (_Payment *PaymentFilterer) ParseSendPayment(log types.Log) (*PaymentSendPayment, error) {
	event := new(PaymentSendPayment)
	if err := _Payment.contract.UnpackLog(event, "SendPayment", log); err != nil {
		return nil, err
	}
	return event, nil
}

// PaymentSettlePaymentIterator is returned from FilterSettlePayment and is used to iterate over the raw logs and unpacked data for SettlePayment events raised by the Payment contract.
type PaymentSettlePaymentIterator struct {
	Event *PaymentSettlePayment // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  klaytn.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PaymentSettlePaymentIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PaymentSettlePayment)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PaymentSettlePayment)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PaymentSettlePaymentIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PaymentSettlePaymentIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PaymentSettlePayment represents a SettlePayment event raised by the Payment contract.
type PaymentSettlePayment struct {
	Sender   common.Address
	Receiver common.Address
	Amount   *big.Int
	Hash     [32]byte
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterSettlePayment is a free log retrieval operation binding the contract event 0x1dad408564bbadde3286d1e89c8439bb753840ba6123a326442ca7eb0c2dada1.
//
// Solidity: event SettlePayment(address sender, address receiver, uint256 amount, bytes32 hash)
func (_Payment *PaymentFilterer) FilterSettlePayment(opts *bind.FilterOpts) (*PaymentSettlePaymentIterator, error) {

	logs, sub, err := _Payment.contract.FilterLogs(opts, "SettlePayment")
	if err != nil {
		return nil, err
	}
	return &PaymentSettlePaymentIterator{contract: _Payment.contract, event: "SettlePayment", logs: logs, sub: sub}, nil
}

// WatchSettlePayment is a free log subscription operation binding the contract event 0x1dad408564bbadde3286d1e89c8439bb753840ba6123a326442ca7eb0c2dada1.
//
// Solidity: event SettlePayment(address sender, address receiver, uint256 amount, bytes32 hash)
func (_Payment *PaymentFilterer) WatchSettlePayment(opts *bind.WatchOpts, sink chan<- *PaymentSettlePayment) (event.Subscription, error) {

	logs, sub, err := _Payment.contract.WatchLogs(opts, "SettlePayment")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PaymentSettlePayment)
				if err := _Payment.contract.UnpackLog(event, "SettlePayment", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSettlePayment is a log parse operation binding the contract event 0x1dad408564bbadde3286d1e89c8439bb753840ba6123a326442ca7eb0c2dada1.
//
// Solidity: event SettlePayment(address sender, address receiver, uint256 amount, bytes32 hash)
func (_Payment *PaymentFilterer) ParseSettlePayment(log types.Log) (*PaymentSettlePayment, error) {
	event := new(PaymentSettlePayment)
	if err := _Payment.contract.UnpackLog(event, "SettlePayment", log); err != nil {
		return nil, err
	}
	return event, nil
}

// PaymentTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the Payment contract.
type PaymentTransferIterator struct {
	Event *PaymentTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  klaytn.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PaymentTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PaymentTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PaymentTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PaymentTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PaymentTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PaymentTransfer represents a Transfer event raised by the Payment contract.
type PaymentTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address from, address to, uint256 value)
func (_Payment *PaymentFilterer) FilterTransfer(opts *bind.FilterOpts) (*PaymentTransferIterator, error) {

	logs, sub, err := _Payment.contract.FilterLogs(opts, "Transfer")
	if err != nil {
		return nil, err
	}
	return &PaymentTransferIterator{contract: _Payment.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address from, address to, uint256 value)
func (_Payment *PaymentFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *PaymentTransfer) (event.Subscription, error) {

	logs, sub, err := _Payment.contract.WatchLogs(opts, "Transfer")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PaymentTransfer)
				if err := _Payment.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address from, address to, uint256 value)
func (_Payment *PaymentFilterer) ParseTransfer(log types.Log) (*PaymentTransfer, error) {
	event := new(PaymentTransfer)
	if err := _Payment.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	return event, nil
}

// QueueABI is the input ABI used to generate the binding from.
const QueueABI = "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"dequeue\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"data\",\"type\":\"bytes32\"}],\"name\":\"enqueue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAll\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"peek\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"

// QueueBinRuntime is the compiled bytecode used for adding genesis block without deploying code.
const QueueBinRuntime = `608060405234801561001057600080fd5b506004361061004c5760003560e01c806353ed51431461005157806359e02dd71461006f578063957908d114610085578063b4de3e231461008d575b600080fd5b6100596100a2565b604051610066919061030a565b60405180910390f35b6100776101a9565b604051908152602001610066565b6100776101fe565b6100a061009b36600461034e565b6102b4565b005b6003546060906001600160a01b031633146100d85760405162461bcd60e51b81526004016100cf90610367565b60405180910390fd5b600060015460025460016100ec91906103b4565b6100f691906103cc565b67ffffffffffffffff81111561010e5761010e6103e3565b604051908082528060200260200182016040528015610137578160200160208202803683370190505b509050600154600254101561014b57905090565b6001545b60025481116101a357600081815260208190526040902054600154839061017690846103cc565b81518110610186576101866103f9565b60209081029190910101528061019b8161040f565b91505061014f565b50905090565b6003546000906001600160a01b031633146101d65760405162461bcd60e51b81526004016100cf90610367565b60015460025410156101e85750600090565b5060015460009081526020819052604090205490565b6003546000906001600160a01b0316331461022b5760405162461bcd60e51b81526004016100cf90610367565b600154600254101561027f5760405162461bcd60e51b815260206004820181905260248201527f556e61626c6520746f206465717565756520616e20656d70747920717565756560448201526064016100cf565b600180546000908152602081905260408120805490829055825490929182916102a99083906103b4565b909155509091505090565b6003546001600160a01b031633146102de5760405162461bcd60e51b81526004016100cf90610367565b6001600260008282546102f191906103b4565b9091555050600254600090815260208190526040902055565b6020808252825182820181905260009190848201906040850190845b8181101561034257835183529284019291840191600101610326565b50909695505050505050565b60006020828403121561036057600080fd5b5035919050565b6020808252601d908201527f4f6e6c7920636f6e7472616374206f776e65722063616e2063616c6c2e000000604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600082198211156103c7576103c761039e565b500190565b6000828210156103de576103de61039e565b500390565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60006000198214156104235761042361039e565b506001019056fea26469706673582212202c2a0f16832d4d9a23d24ed3b3f6a560c31f63f7fa3245fe0a88da50043ef2b064736f6c63430008090033`

// QueueFuncSigs maps the 4-byte function signature to its string representation.
var QueueFuncSigs = map[string]string{
	"957908d1": "dequeue()",
	"b4de3e23": "enqueue(bytes32)",
	"53ed5143": "getAll()",
	"59e02dd7": "peek()",
}

// QueueBin is the compiled bytecode used for deploying new contracts.
var QueueBin = "0x608060405260018055600060025534801561001957600080fd5b50600380546001600160a01b031916331790556104608061003b6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806353ed51431461005157806359e02dd71461006f578063957908d114610085578063b4de3e231461008d575b600080fd5b6100596100a2565b604051610066919061030a565b60405180910390f35b6100776101a9565b604051908152602001610066565b6100776101fe565b6100a061009b36600461034e565b6102b4565b005b6003546060906001600160a01b031633146100d85760405162461bcd60e51b81526004016100cf90610367565b60405180910390fd5b600060015460025460016100ec91906103b4565b6100f691906103cc565b67ffffffffffffffff81111561010e5761010e6103e3565b604051908082528060200260200182016040528015610137578160200160208202803683370190505b509050600154600254101561014b57905090565b6001545b60025481116101a357600081815260208190526040902054600154839061017690846103cc565b81518110610186576101866103f9565b60209081029190910101528061019b8161040f565b91505061014f565b50905090565b6003546000906001600160a01b031633146101d65760405162461bcd60e51b81526004016100cf90610367565b60015460025410156101e85750600090565b5060015460009081526020819052604090205490565b6003546000906001600160a01b0316331461022b5760405162461bcd60e51b81526004016100cf90610367565b600154600254101561027f5760405162461bcd60e51b815260206004820181905260248201527f556e61626c6520746f206465717565756520616e20656d70747920717565756560448201526064016100cf565b600180546000908152602081905260408120805490829055825490929182916102a99083906103b4565b909155509091505090565b6003546001600160a01b031633146102de5760405162461bcd60e51b81526004016100cf90610367565b6001600260008282546102f191906103b4565b9091555050600254600090815260208190526040902055565b6020808252825182820181905260009190848201906040850190845b8181101561034257835183529284019291840191600101610326565b50909695505050505050565b60006020828403121561036057600080fd5b5035919050565b6020808252601d908201527f4f6e6c7920636f6e7472616374206f776e65722063616e2063616c6c2e000000604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600082198211156103c7576103c761039e565b500190565b6000828210156103de576103de61039e565b500390565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60006000198214156104235761042361039e565b506001019056fea26469706673582212202c2a0f16832d4d9a23d24ed3b3f6a560c31f63f7fa3245fe0a88da50043ef2b064736f6c63430008090033"

// DeployQueue deploys a new Klaytn contract, binding an instance of Queue to it.
func DeployQueue(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Queue, error) {
	parsed, err := abi.JSON(strings.NewReader(QueueABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(QueueBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Queue{QueueCaller: QueueCaller{contract: contract}, QueueTransactor: QueueTransactor{contract: contract}, QueueFilterer: QueueFilterer{contract: contract}}, nil
}

// Queue is an auto generated Go binding around a Klaytn contract.
type Queue struct {
	QueueCaller     // Read-only binding to the contract
	QueueTransactor // Write-only binding to the contract
	QueueFilterer   // Log filterer for contract events
}

// QueueCaller is an auto generated read-only Go binding around a Klaytn contract.
type QueueCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// QueueTransactor is an auto generated write-only Go binding around a Klaytn contract.
type QueueTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// QueueFilterer is an auto generated log filtering Go binding around a Klaytn contract events.
type QueueFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// QueueSession is an auto generated Go binding around a Klaytn contract,
// with pre-set call and transact options.
type QueueSession struct {
	Contract     *Queue            // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// QueueCallerSession is an auto generated read-only Go binding around a Klaytn contract,
// with pre-set call options.
type QueueCallerSession struct {
	Contract *QueueCaller  // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// QueueTransactorSession is an auto generated write-only Go binding around a Klaytn contract,
// with pre-set transact options.
type QueueTransactorSession struct {
	Contract     *QueueTransactor  // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// QueueRaw is an auto generated low-level Go binding around a Klaytn contract.
type QueueRaw struct {
	Contract *Queue // Generic contract binding to access the raw methods on
}

// QueueCallerRaw is an auto generated low-level read-only Go binding around a Klaytn contract.
type QueueCallerRaw struct {
	Contract *QueueCaller // Generic read-only contract binding to access the raw methods on
}

// QueueTransactorRaw is an auto generated low-level write-only Go binding around a Klaytn contract.
type QueueTransactorRaw struct {
	Contract *QueueTransactor // Generic write-only contract binding to access the raw methods on
}

// NewQueue creates a new instance of Queue, bound to a specific deployed contract.
func NewQueue(address common.Address, backend bind.ContractBackend) (*Queue, error) {
	contract, err := bindQueue(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Queue{QueueCaller: QueueCaller{contract: contract}, QueueTransactor: QueueTransactor{contract: contract}, QueueFilterer: QueueFilterer{contract: contract}}, nil
}

// NewQueueCaller creates a new read-only instance of Queue, bound to a specific deployed contract.
func NewQueueCaller(address common.Address, caller bind.ContractCaller) (*QueueCaller, error) {
	contract, err := bindQueue(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &QueueCaller{contract: contract}, nil
}

// NewQueueTransactor creates a new write-only instance of Queue, bound to a specific deployed contract.
func NewQueueTransactor(address common.Address, transactor bind.ContractTransactor) (*QueueTransactor, error) {
	contract, err := bindQueue(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &QueueTransactor{contract: contract}, nil
}

// NewQueueFilterer creates a new log filterer instance of Queue, bound to a specific deployed contract.
func NewQueueFilterer(address common.Address, filterer bind.ContractFilterer) (*QueueFilterer, error) {
	contract, err := bindQueue(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &QueueFilterer{contract: contract}, nil
}

// bindQueue binds a generic wrapper to an already deployed contract.
func bindQueue(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(QueueABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Queue *QueueRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Queue.Contract.QueueCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Queue *QueueRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Queue.Contract.QueueTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Queue *QueueRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Queue.Contract.QueueTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Queue *QueueCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Queue.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Queue *QueueTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Queue.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Queue *QueueTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Queue.Contract.contract.Transact(opts, method, params...)
}

// GetAll is a free data retrieval call binding the contract method 0x53ed5143.
//
// Solidity: function getAll() view returns(bytes32[])
func (_Queue *QueueCaller) GetAll(opts *bind.CallOpts) ([][32]byte, error) {
	var (
		ret0 = new([][32]byte)
	)
	out := ret0
	err := _Queue.contract.Call(opts, out, "getAll")
	return *ret0, err
}

// GetAll is a free data retrieval call binding the contract method 0x53ed5143.
//
// Solidity: function getAll() view returns(bytes32[])
func (_Queue *QueueSession) GetAll() ([][32]byte, error) {
	return _Queue.Contract.GetAll(&_Queue.CallOpts)
}

// GetAll is a free data retrieval call binding the contract method 0x53ed5143.
//
// Solidity: function getAll() view returns(bytes32[])
func (_Queue *QueueCallerSession) GetAll() ([][32]byte, error) {
	return _Queue.Contract.GetAll(&_Queue.CallOpts)
}

// Peek is a free data retrieval call binding the contract method 0x59e02dd7.
//
// Solidity: function peek() view returns(bytes32)
func (_Queue *QueueCaller) Peek(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Queue.contract.Call(opts, out, "peek")
	return *ret0, err
}

// Peek is a free data retrieval call binding the contract method 0x59e02dd7.
//
// Solidity: function peek() view returns(bytes32)
func (_Queue *QueueSession) Peek() ([32]byte, error) {
	return _Queue.Contract.Peek(&_Queue.CallOpts)
}

// Peek is a free data retrieval call binding the contract method 0x59e02dd7.
//
// Solidity: function peek() view returns(bytes32)
func (_Queue *QueueCallerSession) Peek() ([32]byte, error) {
	return _Queue.Contract.Peek(&_Queue.CallOpts)
}

// Dequeue is a paid mutator transaction binding the contract method 0x957908d1.
//
// Solidity: function dequeue() returns(bytes32)
func (_Queue *QueueTransactor) Dequeue(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Queue.contract.Transact(opts, "dequeue")
}

// Dequeue is a paid mutator transaction binding the contract method 0x957908d1.
//
// Solidity: function dequeue() returns(bytes32)
func (_Queue *QueueSession) Dequeue() (*types.Transaction, error) {
	return _Queue.Contract.Dequeue(&_Queue.TransactOpts)
}

// Dequeue is a paid mutator transaction binding the contract method 0x957908d1.
//
// Solidity: function dequeue() returns(bytes32)
func (_Queue *QueueTransactorSession) Dequeue() (*types.Transaction, error) {
	return _Queue.Contract.Dequeue(&_Queue.TransactOpts)
}

// Enqueue is a paid mutator transaction binding the contract method 0xb4de3e23.
//
// Solidity: function enqueue(bytes32 data) returns()
func (_Queue *QueueTransactor) Enqueue(opts *bind.TransactOpts, data [32]byte) (*types.Transaction, error) {
	return _Queue.contract.Transact(opts, "enqueue", data)
}

// Enqueue is a paid mutator transaction binding the contract method 0xb4de3e23.
//
// Solidity: function enqueue(bytes32 data) returns()
func (_Queue *QueueSession) Enqueue(data [32]byte) (*types.Transaction, error) {
	return _Queue.Contract.Enqueue(&_Queue.TransactOpts, data)
}

// Enqueue is a paid mutator transaction binding the contract method 0xb4de3e23.
//
// Solidity: function enqueue(bytes32 data) returns()
func (_Queue *QueueTransactorSession) Enqueue(data [32]byte) (*types.Transaction, error) {
	return _Queue.Contract.Enqueue(&_Queue.TransactOpts, data)
}
